
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.Simbolo.Tipo;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\034\004\000\002\034\006" +
    "\000\002\035\005\000\002\035\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\003\000\002\010\006\000\002\012\006\000\002\013\010" +
    "\000\002\014\005\000\002\006\005\000\002\006\003\000" +
    "\002\015\010\000\002\015\007\000\002\015\012\000\002" +
    "\016\006\000\002\036\006\000\002\036\005\000\002\037" +
    "\007\000\002\037\005\000\002\042\003\000\002\042\003" +
    "\000\002\043\005\000\002\043\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\011\004\000\002\011\004\000\002\017" +
    "\011\000\002\017\015\000\002\017\012\000\002\017\016" +
    "\000\002\004\013\000\002\004\012\000\002\020\015\000" +
    "\002\005\010\000\002\005\007\000\002\021\015\000\002" +
    "\022\015\000\002\027\015\000\002\023\011\000\002\024" +
    "\003\000\002\025\003\000\002\026\004\000\002\040\003" +
    "\000\002\040\002\000\002\030\014\000\002\031\010\000" +
    "\002\032\010\000\002\044\006\000\002\044\006\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\004\000\002\033\004\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\021\006\001\002\000\004\002\u0101\001" +
    "\002\000\004\013\015\001\002\000\004\020\007\001\002" +
    "\000\006\013\ufffd\022\010\001\002\000\004\020\012\001" +
    "\002\000\006\013\ufffc\063\013\001\002\000\006\013\ufffa" +
    "\063\ufffa\001\002\000\004\020\014\001\002\000\006\013" +
    "\ufffb\063\ufffb\001\002\000\042\003\047\017\026\020\025" +
    "\034\041\035\uffba\036\027\040\053\042\043\043\037\045" +
    "\063\046\033\047\061\050\051\051\045\053\062\054\023" +
    "\001\002\000\044\003\uffee\014\uffee\017\uffee\020\uffee\034" +
    "\uffee\035\uffee\036\uffee\040\uffee\042\uffee\043\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\053\uffee\054\uffee\001" +
    "\002\000\044\003\ufff2\014\ufff2\017\ufff2\020\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\040\ufff2\042\ufff2\043\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\001\002" +
    "\000\006\063\173\072\377\001\002\000\004\035\353\001" +
    "\002\000\044\003\ufff9\014\ufff9\017\ufff9\020\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\001\002" +
    "\000\004\066\346\001\002\000\044\003\uffed\014\uffed\017" +
    "\uffed\020\uffed\034\uffed\035\uffed\036\uffed\040\uffed\042\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\053" +
    "\uffed\054\uffed\001\002\000\016\005\153\006\152\007\335" +
    "\063\uffdf\064\334\072\uffdf\001\002\000\004\066\330\001" +
    "\002\000\004\066\273\001\002\000\044\003\047\014\272" +
    "\017\026\020\025\034\041\035\uffba\036\027\040\053\042" +
    "\043\043\037\045\063\046\033\047\061\050\051\051\045" +
    "\053\062\054\023\001\002\000\044\003\ufff8\014\ufff8\017" +
    "\ufff8\020\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8" +
    "\043\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053" +
    "\ufff8\054\ufff8\001\002\000\044\003\ufff3\014\ufff3\017\ufff3" +
    "\020\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3\043" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3" +
    "\054\ufff3\001\002\000\004\066\264\001\002\000\044\003" +
    "\uffea\014\uffea\017\uffea\020\uffea\034\uffea\035\uffea\036\uffea" +
    "\040\uffea\042\uffea\043\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\053\uffea\054\uffea\001\002\000\044\003\uffef" +
    "\014\uffef\017\uffef\020\uffef\034\uffef\035\uffef\036\uffef\040" +
    "\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\053\uffef\054\uffef\001\002\000\044\003\uffe8\014" +
    "\uffe8\017\uffe8\020\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\001\002\000\044\003\uffbe\014\uffbe" +
    "\017\uffbe\020\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\042" +
    "\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\053\uffbe\054\uffbe\001\002\000\044\003\ufff5\014\ufff5\017" +
    "\ufff5\020\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5" +
    "\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\001\002\000\004\035\uffbb\001\002\000\044" +
    "\003\ufffe\014\ufffe\017\ufffe\020\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\040\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\053\ufffe\054\ufffe\001\002\000\044\003" +
    "\uffbd\014\uffbd\017\uffbd\020\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\001\002\000\044\003\ufff7" +
    "\014\ufff7\017\ufff7\020\ufff7\034\ufff7\035\ufff7\036\ufff7\040" +
    "\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\053\ufff7\054\ufff7\001\002\000\004\066\253\001" +
    "\002\000\044\003\ufff6\014\ufff6\017\ufff6\020\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6\001\002" +
    "\000\044\003\uffe5\014\uffe5\017\uffe5\020\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\001\002\000" +
    "\044\003\uffe7\014\uffe7\017\uffe7\020\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\044\003\uffe9" +
    "\014\uffe9\017\uffe9\020\uffe9\034\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\053\uffe9\054\uffe9\001\002\000\004\066\226\001" +
    "\002\000\044\003\uffeb\014\uffeb\017\uffeb\020\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\001\002" +
    "\000\044\003\ufff0\014\ufff0\017\ufff0\020\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\040\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\053\ufff0\054\ufff0\001\002\000" +
    "\044\003\ufff1\014\ufff1\017\ufff1\020\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\040\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\053\ufff1\054\ufff1\001\002\000\044" +
    "\003\ufff4\014\ufff4\017\ufff4\020\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\053\ufff4\054\ufff4\001\002\000\044\003" +
    "\uffec\014\uffec\017\uffec\020\uffec\034\uffec\035\uffec\036\uffec" +
    "\040\uffec\042\uffec\043\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\053\uffec\054\uffec\001\002\000\004\066\214" +
    "\001\002\000\004\066\207\001\002\000\004\066\064\001" +
    "\002\000\010\020\067\034\041\035\uffba\001\002\000\004" +
    "\004\177\001\002\000\004\035\163\001\002\000\050\003" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\053\uffdf\054\uffdf\063\uffdf\072\uffdf\001\002" +
    "\000\004\004\071\001\002\000\026\011\101\012\073\020" +
    "\102\024\104\026\077\032\072\033\076\066\074\107\100" +
    "\111\103\001\002\000\120\003\uff9f\004\uff9f\013\uff9f\014" +
    "\uff9f\017\uff9f\020\uff9f\034\uff9f\035\uff9f\036\uff9f\040\uff9f" +
    "\042\uff9f\043\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\053\uff9f\054\uff9f\063\uff9f\065\uff9f\067\uff9f\071\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\102" +
    "\uff9f\103\uff9f\104\uff9f\106\uff9f\110\uff9f\111\uff9f\112\uff9f" +
    "\113\uff9f\114\uff9f\115\uff9f\001\002\000\120\003\uff9b\004" +
    "\uff9b\013\uff9b\014\uff9b\017\uff9b\020\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\040\uff9b\042\uff9b\043\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b\063\uff9b\065\uff9b" +
    "\067\uff9b\071\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\102\uff9b\103\uff9b\104\uff9b\106\uff9b\110\uff9b" +
    "\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\001\002\000" +
    "\026\011\101\012\073\020\102\024\104\026\077\032\072" +
    "\033\076\066\074\107\100\111\103\001\002\000\044\004" +
    "\147\073\124\074\113\075\116\076\114\077\117\100\107" +
    "\102\106\103\120\104\125\106\110\110\112\111\123\112" +
    "\115\113\122\114\121\115\111\001\002\000\120\003\uff9e" +
    "\004\uff9e\013\uff9e\014\uff9e\017\uff9e\020\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\063\uff9e\065" +
    "\uff9e\067\uff9e\071\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\102\uff9e\103\uff9e\104\uff9e\106\uff9e\110" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\001\002" +
    "\000\120\003\uffa0\004\uffa0\013\uffa0\014\uffa0\017\uffa0\020" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\054" +
    "\uffa0\063\uffa0\065\uffa0\067\uffa0\071\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\106\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0" +
    "\115\uffa0\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\120\003\uff9c\004\uff9c\013\uff9c\014\uff9c\017" +
    "\uff9c\020\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c\042\uff9c" +
    "\043\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\053" +
    "\uff9c\054\uff9c\063\uff9c\065\uff9c\067\uff9c\071\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103" +
    "\uff9c\104\uff9c\106\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c" +
    "\114\uff9c\115\uff9c\001\002\000\120\003\uff9d\004\uff9d\013" +
    "\uff9d\014\uff9d\017\uff9d\020\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\040\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\053\uff9d\054\uff9d\063\uff9d\065\uff9d\067\uff9d" +
    "\071\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\102\uff9d\103\uff9d\104\uff9d\106\uff9d\110\uff9d\111\uff9d" +
    "\112\uff9d\113\uff9d\114\uff9d\115\uff9d\001\002\000\026\011" +
    "\101\012\073\020\102\024\104\026\077\032\072\033\076" +
    "\066\074\107\100\111\103\001\002\000\120\003\uffa1\004" +
    "\uffa1\013\uffa1\014\uffa1\017\uffa1\020\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\040\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\063\uffa1\065\uffa1" +
    "\067\uffa1\071\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\102\uffa1\103\uffa1\104\uffa1\106\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\001\002\000" +
    "\120\003\uffa4\004\uffa4\013\uffa4\014\uffa4\017\uffa4\020\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4" +
    "\063\uffa4\065\uffa4\067\uffa4\071\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\106\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115" +
    "\uffa4\001\002\000\026\011\101\012\073\020\102\024\104" +
    "\026\077\032\072\033\076\066\074\107\100\111\103\001" +
    "\002\000\026\011\101\012\073\020\102\024\104\026\077" +
    "\032\072\033\076\066\074\107\100\111\103\001\002\000" +
    "\026\011\101\012\073\020\102\024\104\026\077\032\072" +
    "\033\076\066\074\107\100\111\103\001\002\000\026\011" +
    "\101\012\073\020\102\024\104\026\077\032\072\033\076" +
    "\066\074\107\100\111\103\001\002\000\026\011\101\012" +
    "\073\020\102\024\104\026\077\032\072\033\076\066\074" +
    "\107\100\111\103\001\002\000\026\011\101\012\073\020" +
    "\102\024\104\026\077\032\072\033\076\066\074\107\100" +
    "\111\103\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\026\011\101\012\073\020\102\024\104\026" +
    "\077\032\072\033\076\066\074\107\100\111\103\001\002" +
    "\000\026\011\101\012\073\020\102\024\104\026\077\032" +
    "\072\033\076\066\074\107\100\111\103\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\026\011\101" +
    "\012\073\020\102\024\104\026\077\032\072\033\076\066" +
    "\074\107\100\111\103\001\002\000\026\011\101\012\073" +
    "\020\102\024\104\026\077\032\072\033\076\066\074\107" +
    "\100\111\103\001\002\000\026\011\101\012\073\020\102" +
    "\024\104\026\077\032\072\033\076\066\074\107\100\111" +
    "\103\001\002\000\026\011\101\012\073\020\102\024\104" +
    "\026\077\032\072\033\076\066\074\107\100\111\103\001" +
    "\002\000\026\011\101\012\073\020\102\024\104\026\077" +
    "\032\072\033\076\066\074\107\100\111\103\001\002\000" +
    "\026\011\101\012\073\020\102\024\104\026\077\032\072" +
    "\033\076\066\074\107\100\111\103\001\002\000\120\003" +
    "\uffa8\004\uffa8\013\uffa8\014\uffa8\017\uffa8\020\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\063\uffa8" +
    "\065\uffa8\067\uffa8\071\uffa8\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\uffa8\106\uffa8" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\120\003\uffae\004\uffae\013\uffae\014\uffae\017\uffae" +
    "\020\uffae\034\uffae\035\uffae\036\uffae\040\uffae\042\uffae\043" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae" +
    "\054\uffae\063\uffae\065\uffae\067\uffae\071\uffae\073\124\074" +
    "\113\075\116\076\114\077\117\100\107\102\uffae\103\uffae" +
    "\104\uffae\106\uffae\110\112\111\123\112\115\113\122\114" +
    "\121\115\111\001\002\000\120\003\uffb3\004\uffb3\013\uffb3" +
    "\014\uffb3\017\uffb3\020\uffb3\034\uffb3\035\uffb3\036\uffb3\040" +
    "\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\053\uffb3\054\uffb3\063\uffb3\065\uffb3\067\uffb3\071" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\106\uffb3\110\uffb3\111\uffb3\112" +
    "\115\113\122\114\121\115\111\001\002\000\120\003\uffb1" +
    "\004\uffb1\013\uffb1\014\uffb1\017\uffb1\020\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\040\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\063\uffb1\065" +
    "\uffb1\067\uffb1\071\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\100\uffb1\102\uffb1\103\uffb1\104\uffb1\106\uffb1\110" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\111\001\002" +
    "\000\120\003\uffaf\004\uffaf\013\uffaf\014\uffaf\017\uffaf\020" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\042\uffaf\043\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054" +
    "\uffaf\063\uffaf\065\uffaf\067\uffaf\071\uffaf\073\uffaf\074\uffaf" +
    "\075\uffaf\076\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf\104" +
    "\uffaf\106\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf" +
    "\115\111\001\002\000\120\003\uffa5\004\uffa5\013\uffa5\014" +
    "\uffa5\017\uffa5\020\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5" +
    "\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\054\uffa5\063\uffa5\065\uffa5\067\uffa5\071\uffa5" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\uffa5\103\uffa5\104\uffa5\106\uffa5\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\120\003\uffaa\004" +
    "\uffaa\013\uffaa\014\uffaa\017\uffaa\020\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\040\uffaa\042\uffaa\043\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\063\uffaa\065\uffaa" +
    "\067\uffaa\071\uffaa\073\124\074\113\075\116\076\114\077" +
    "\117\100\107\102\uffaa\103\uffaa\104\uffaa\106\uffaa\110\112" +
    "\111\123\112\115\113\122\114\121\115\111\001\002\000" +
    "\120\003\uffac\004\uffac\013\uffac\014\uffac\017\uffac\020\uffac" +
    "\034\uffac\035\uffac\036\uffac\040\uffac\042\uffac\043\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\053\uffac\054\uffac" +
    "\063\uffac\065\uffac\067\uffac\071\uffac\073\124\074\113\075" +
    "\116\076\114\077\117\100\107\102\uffac\103\uffac\104\uffac" +
    "\106\uffac\110\112\111\123\112\115\113\122\114\121\115" +
    "\111\001\002\000\120\003\uffb2\004\uffb2\013\uffb2\014\uffb2" +
    "\017\uffb2\020\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\042" +
    "\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\053\uffb2\054\uffb2\063\uffb2\065\uffb2\067\uffb2\071\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\106\uffb2\110\uffb2\111\uffb2\112\uffb2\113" +
    "\uffb2\114\uffb2\115\111\001\002\000\120\003\uffab\004\uffab" +
    "\013\uffab\014\uffab\017\uffab\020\uffab\034\uffab\035\uffab\036" +
    "\uffab\040\uffab\042\uffab\043\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\053\uffab\054\uffab\063\uffab\065\uffab\067" +
    "\uffab\071\uffab\073\124\074\113\075\116\076\114\077\117" +
    "\100\107\102\uffab\103\uffab\104\uffab\106\uffab\110\112\111" +
    "\123\112\115\113\122\114\121\115\111\001\002\000\120" +
    "\003\uffad\004\uffad\013\uffad\014\uffad\017\uffad\020\uffad\034" +
    "\uffad\035\uffad\036\uffad\040\uffad\042\uffad\043\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\054\uffad\063" +
    "\uffad\065\uffad\067\uffad\071\uffad\073\124\074\113\075\116" +
    "\076\114\077\117\100\107\102\uffad\103\uffad\104\uffad\106" +
    "\uffad\110\112\111\123\112\115\113\122\114\121\115\111" +
    "\001\002\000\120\003\uffb4\004\uffb4\013\uffb4\014\uffb4\017" +
    "\uffb4\020\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4" +
    "\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053" +
    "\uffb4\054\uffb4\063\uffb4\065\uffb4\067\uffb4\071\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\106\uffb4\110\uffb4\111\uffb4\112\115\113\122" +
    "\114\121\115\111\001\002\000\120\003\uffb0\004\uffb0\013" +
    "\uffb0\014\uffb0\017\uffb0\020\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\040\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\054\uffb0\063\uffb0\065\uffb0\067\uffb0" +
    "\071\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\106\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\113\uffb0\114\uffb0\115\uffb0\001\002\000\120\003" +
    "\uffa7\004\uffa7\013\uffa7\014\uffa7\017\uffa7\020\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\040\uffa7\042\uffa7\043\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\063\uffa7" +
    "\065\uffa7\067\uffa7\071\uffa7\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\uffa7\106\uffa7" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\120\003\uffa9\004\uffa9\013\uffa9\014\uffa9\017\uffa9" +
    "\020\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9" +
    "\054\uffa9\063\uffa9\065\uffa9\067\uffa9\071\uffa9\073\124\074" +
    "\113\075\116\076\114\077\117\100\107\102\uffa9\103\uffa9" +
    "\104\uffa9\106\uffa9\110\112\111\123\112\115\113\122\114" +
    "\121\115\111\001\002\000\120\003\uffa6\004\uffa6\013\uffa6" +
    "\014\uffa6\017\uffa6\020\uffa6\034\uffa6\035\uffa6\036\uffa6\040" +
    "\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\053\uffa6\054\uffa6\063\uffa6\065\uffa6\067\uffa6\071" +
    "\uffa6\073\124\074\113\075\116\076\114\077\117\100\107" +
    "\102\uffa6\103\uffa6\104\uffa6\106\uffa6\110\112\111\123\112" +
    "\115\113\122\114\121\115\111\001\002\000\120\003\uffa3" +
    "\004\uffa3\013\uffa3\014\uffa3\017\uffa3\020\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\063\uffa3\065" +
    "\uffa3\067\uffa3\071\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\077\uffa3\100\uffa3\102\uffa3\103\uffa3\104\uffa3\106\uffa3\110" +
    "\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\001\002" +
    "\000\004\020\151\001\002\000\004\067\154\001\002\000" +
    "\006\005\153\006\152\001\002\000\046\003\uffcc\014\uffcc" +
    "\017\uffcc\020\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\053\uffcc\054\uffcc\067\uffcc\001\002\000\046\003\uffcd\014" +
    "\uffcd\017\uffcd\020\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\053\uffcd\054\uffcd\067\uffcd\001\002\000\004\013\155" +
    "\001\002\000\042\003\047\017\026\020\025\034\041\035" +
    "\uffba\036\027\040\053\042\043\043\037\045\063\046\033" +
    "\047\061\050\051\051\045\053\062\054\023\001\002\000" +
    "\044\003\047\014\160\017\026\020\025\034\041\035\uffba" +
    "\036\027\040\053\042\043\043\037\045\063\046\033\047" +
    "\061\050\051\051\045\053\062\054\023\001\002\000\044" +
    "\003\uffff\014\uffff\017\uffff\020\uffff\034\uffff\035\uffff\036" +
    "\uffff\040\uffff\042\uffff\043\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\053\uffff\054\uffff\001\002\000\044\003" +
    "\uffc1\014\uffc1\017\uffc1\020\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\040\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\053\uffc1\054\uffc1\001\002\000\044\067\162" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\106\103\120\104\125\106\110\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\120\003\uffa2\004" +
    "\uffa2\013\uffa2\014\uffa2\017\uffa2\020\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\040\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\063\uffa2\065\uffa2" +
    "\067\uffa2\071\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\106\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\001\002\000" +
    "\014\023\171\025\167\027\166\030\164\031\170\001\002" +
    "\000\006\020\uffcf\062\uffcf\001\002\000\004\020\067\001" +
    "\002\000\006\020\uffce\062\uffce\001\002\000\006\020\uffd0" +
    "\062\uffd0\001\002\000\006\020\uffd2\062\uffd2\001\002\000" +
    "\006\020\uffd1\062\uffd1\001\002\000\006\063\173\072\174" +
    "\001\002\000\004\020\176\001\002\000\026\011\101\012" +
    "\073\020\102\024\104\026\077\032\072\033\076\066\074" +
    "\107\100\111\103\001\002\000\106\003\uffe2\004\uffe2\014" +
    "\uffe2\017\uffe2\020\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\053\uffe2\054\uffe2\073\124\074\113\075\116\076\114" +
    "\077\117\100\107\102\106\103\120\104\125\106\110\110" +
    "\112\111\123\112\115\113\122\114\121\115\111\001\002" +
    "\000\050\003\uffe0\014\uffe0\017\uffe0\020\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\040\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\063\uffe0\072" +
    "\uffe0\001\002\000\026\011\101\012\073\020\102\024\104" +
    "\026\077\032\072\033\076\066\074\107\100\111\103\001" +
    "\002\000\044\004\201\073\124\074\113\075\116\076\114" +
    "\077\117\100\107\102\106\103\120\104\125\106\110\110" +
    "\112\111\123\112\115\113\122\114\121\115\111\001\002" +
    "\000\004\020\151\001\002\000\004\067\203\001\002\000" +
    "\004\013\204\001\002\000\042\003\047\017\026\020\025" +
    "\034\041\035\uffba\036\027\040\053\042\043\043\037\045" +
    "\063\046\033\047\061\050\051\051\045\053\062\054\023" +
    "\001\002\000\044\003\047\014\206\017\026\020\025\034" +
    "\041\035\uffba\036\027\040\053\042\043\043\037\045\063" +
    "\046\033\047\061\050\051\051\045\053\062\054\023\001" +
    "\002\000\044\003\uffc2\014\uffc2\017\uffc2\020\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\040\uffc2\042\uffc2\043\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\001\002" +
    "\000\026\011\101\012\073\020\102\024\104\026\077\032" +
    "\072\033\076\066\074\107\100\111\103\001\002\000\044" +
    "\063\211\073\124\074\113\075\116\076\114\077\117\100" +
    "\107\102\106\103\120\104\125\106\110\110\112\111\123" +
    "\112\115\113\122\114\121\115\111\001\002\000\026\011" +
    "\101\012\073\020\102\024\104\026\077\032\072\033\076" +
    "\066\074\107\100\111\103\001\002\000\044\067\213\073" +
    "\124\074\113\075\116\076\114\077\117\100\107\102\106" +
    "\103\120\104\125\106\110\110\112\111\123\112\115\113" +
    "\122\114\121\115\111\001\002\000\044\003\uffb8\014\uffb8" +
    "\017\uffb8\020\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\042" +
    "\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\054\uffb8\001\002\000\026\011\101\012\073\020" +
    "\102\024\104\026\077\032\072\033\076\066\074\107\100" +
    "\111\103\001\002\000\044\067\216\073\124\074\113\075" +
    "\116\076\114\077\117\100\107\102\106\103\120\104\125" +
    "\106\110\110\112\111\123\112\115\113\122\114\121\115" +
    "\111\001\002\000\004\013\217\001\002\000\042\003\047" +
    "\017\026\020\025\034\041\035\uffba\036\027\040\053\042" +
    "\043\043\037\045\063\046\033\047\061\050\051\051\045" +
    "\053\062\054\023\001\002\000\044\003\047\014\221\017" +
    "\026\020\025\034\041\035\uffba\036\027\040\053\042\043" +
    "\043\037\045\063\046\033\047\061\050\051\051\045\053" +
    "\062\054\023\001\002\000\004\046\222\001\002\000\004" +
    "\066\223\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\044\067\225\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\044\003\uffc0\014\uffc0\017\uffc0\020\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\040\uffc0\042\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\001\002" +
    "\000\026\011\101\012\073\020\102\024\104\026\077\032" +
    "\072\033\076\066\074\107\100\111\103\001\002\000\044" +
    "\067\230\073\124\074\113\075\116\076\114\077\117\100" +
    "\107\102\106\103\120\104\125\106\110\110\112\111\123" +
    "\112\115\113\122\114\121\115\111\001\002\000\004\013" +
    "\231\001\002\000\004\041\233\001\002\000\006\041\241" +
    "\044\240\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\044\013\235\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\042\003\047\017\026\020\025\034\041\035\uffba" +
    "\036\027\040\053\042\043\043\037\045\063\046\033\047" +
    "\061\050\051\051\045\053\062\054\023\001\002\000\044" +
    "\003\047\014\237\017\026\020\025\034\041\035\uffba\036" +
    "\027\040\053\042\043\043\037\045\063\046\033\047\061" +
    "\050\051\051\045\053\062\054\023\001\002\000\006\041" +
    "\uffc3\044\uffc3\001\002\000\004\013\246\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\044\013\243" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\106\103\120\104\125\106\110\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\042\003\047\017" +
    "\026\020\025\034\041\035\uffba\036\027\040\053\042\043" +
    "\043\037\045\063\046\033\047\061\050\051\051\045\053" +
    "\062\054\023\001\002\000\044\003\047\014\245\017\026" +
    "\020\025\034\041\035\uffba\036\027\040\053\042\043\043" +
    "\037\045\063\046\033\047\061\050\051\051\045\053\062" +
    "\054\023\001\002\000\006\041\uffc4\044\uffc4\001\002\000" +
    "\042\003\047\017\026\020\025\034\041\035\uffba\036\027" +
    "\040\053\042\043\043\037\045\063\046\033\047\061\050" +
    "\051\051\045\053\062\054\023\001\002\000\044\003\047" +
    "\014\250\017\026\020\025\034\041\035\uffba\036\027\040" +
    "\053\042\043\043\037\045\063\046\033\047\061\050\051" +
    "\051\045\053\062\054\023\001\002\000\004\014\251\001" +
    "\002\000\044\003\uffc5\014\uffc5\017\uffc5\020\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\040\uffc5\042\uffc5\043\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5\001\002" +
    "\000\104\003\uffbc\014\uffbc\017\uffbc\020\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\040\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\073\124\074" +
    "\113\075\116\076\114\077\117\100\107\102\106\103\120" +
    "\104\125\106\110\110\112\111\123\112\115\113\122\114" +
    "\121\115\111\001\002\000\004\052\254\001\002\000\004" +
    "\063\255\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\044\063\257\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\026\011\101\012\073\020\102\024\104\026\077" +
    "\032\072\033\076\066\074\107\100\111\103\001\002\000" +
    "\044\063\261\073\124\074\113\075\116\076\114\077\117" +
    "\100\107\102\106\103\120\104\125\106\110\110\112\111" +
    "\123\112\115\113\122\114\121\115\111\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\044\067\263" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\106\103\120\104\125\106\110\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\044\003\uffb9\014" +
    "\uffb9\017\uffb9\020\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9" +
    "\042\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\053\uffb9\054\uffb9\001\002\000\026\011\101\012\073" +
    "\020\102\024\104\026\077\032\072\033\076\066\074\107" +
    "\100\111\103\001\002\000\044\067\266\073\124\074\113" +
    "\075\116\076\114\077\117\100\107\102\106\103\120\104" +
    "\125\106\110\110\112\111\123\112\115\113\122\114\121" +
    "\115\111\001\002\000\004\013\267\001\002\000\042\003" +
    "\047\017\026\020\025\034\041\035\uffba\036\027\040\053" +
    "\042\043\043\037\045\063\046\033\047\061\050\051\051" +
    "\045\053\062\054\023\001\002\000\044\003\047\014\271" +
    "\017\026\020\025\034\041\035\uffba\036\027\040\053\042" +
    "\043\043\037\045\063\046\033\047\061\050\051\051\045" +
    "\053\062\054\023\001\002\000\044\003\uffbf\014\uffbf\017" +
    "\uffbf\020\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\042\uffbf" +
    "\043\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053" +
    "\uffbf\054\uffbf\001\002\000\004\002\000\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\044\067\275" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\106\103\120\104\125\106\110\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\004\013\276\001" +
    "\002\000\042\003\047\017\026\020\025\034\041\035\uffba" +
    "\036\027\040\053\042\043\043\037\045\063\046\033\047" +
    "\061\050\051\051\045\053\062\054\023\001\002\000\044" +
    "\003\047\014\300\017\026\020\025\034\041\035\uffba\036" +
    "\027\040\053\042\043\043\037\045\063\046\033\047\061" +
    "\050\051\051\045\053\062\054\023\001\002\000\046\003" +
    "\uffcb\014\uffcb\017\uffcb\020\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\302\040\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\001\002\000\046" +
    "\003\uffc9\014\uffc9\017\uffc9\020\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\315\040\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\001\002\000" +
    "\006\013\304\036\303\001\002\000\004\066\307\001\002" +
    "\000\042\003\047\017\026\020\025\034\041\035\uffba\036" +
    "\027\040\053\042\043\043\037\045\063\046\033\047\061" +
    "\050\051\051\045\053\062\054\023\001\002\000\044\003" +
    "\047\014\306\017\026\020\025\034\041\035\uffba\036\027" +
    "\040\053\042\043\043\037\045\063\046\033\047\061\050" +
    "\051\051\045\053\062\054\023\001\002\000\044\003\uffca" +
    "\014\uffca\017\uffca\020\uffca\034\uffca\035\uffca\036\uffca\040" +
    "\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\053\uffca\054\uffca\001\002\000\026\011\101\012" +
    "\073\020\102\024\104\026\077\032\072\033\076\066\074" +
    "\107\100\111\103\001\002\000\044\067\311\073\124\074" +
    "\113\075\116\076\114\077\117\100\107\102\106\103\120" +
    "\104\125\106\110\110\112\111\123\112\115\113\122\114" +
    "\121\115\111\001\002\000\004\013\312\001\002\000\042" +
    "\003\047\017\026\020\025\034\041\035\uffba\036\027\040" +
    "\053\042\043\043\037\045\063\046\033\047\061\050\051" +
    "\051\045\053\062\054\023\001\002\000\044\003\047\014" +
    "\314\017\026\020\025\034\041\035\uffba\036\027\040\053" +
    "\042\043\043\037\045\063\046\033\047\061\050\051\051" +
    "\045\053\062\054\023\001\002\000\046\003\uffc6\014\uffc6" +
    "\017\uffc6\020\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\053\uffc6\054\uffc6\001\002\000\006\013\317\036" +
    "\316\001\002\000\004\066\322\001\002\000\042\003\047" +
    "\017\026\020\025\034\041\035\uffba\036\027\040\053\042" +
    "\043\043\037\045\063\046\033\047\061\050\051\051\045" +
    "\053\062\054\023\001\002\000\044\003\047\014\321\017" +
    "\026\020\025\034\041\035\uffba\036\027\040\053\042\043" +
    "\043\037\045\063\046\033\047\061\050\051\051\045\053" +
    "\062\054\023\001\002\000\044\003\uffc8\014\uffc8\017\uffc8" +
    "\020\uffc8\034\uffc8\035\uffc8\036\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8" +
    "\054\uffc8\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\044\067\324\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\004\013\325\001\002\000\042\003\047\017\026" +
    "\020\025\034\041\035\uffba\036\027\040\053\042\043\043" +
    "\037\045\063\046\033\047\061\050\051\051\045\053\062" +
    "\054\023\001\002\000\044\003\047\014\327\017\026\020" +
    "\025\034\041\035\uffba\036\027\040\053\042\043\043\037" +
    "\045\063\046\033\047\061\050\051\051\045\053\062\054" +
    "\023\001\002\000\046\003\uffc7\014\uffc7\017\uffc7\020\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7" +
    "\054\uffc7\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\044\067\332\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\044\003\uffe4\014\uffe4\017\uffe4\020\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\040\uffe4\042\uffe4\043\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\001\002" +
    "\000\006\064\342\072\341\001\002\000\026\011\101\012" +
    "\073\020\102\024\104\026\077\032\072\033\076\066\074" +
    "\107\100\111\103\001\002\000\026\011\101\012\073\020" +
    "\102\024\104\026\077\032\072\033\076\066\074\107\100" +
    "\111\103\001\002\000\104\003\uffe6\014\uffe6\017\uffe6\020" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\073\124\074\113\075\116\076\114\077\117\100\107" +
    "\102\106\103\120\104\125\106\110\110\112\111\123\112" +
    "\115\113\122\114\121\115\111\001\002\000\044\065\340" +
    "\073\124\074\113\075\116\076\114\077\117\100\107\102" +
    "\106\103\120\104\125\106\110\110\112\111\123\112\115" +
    "\113\122\114\121\115\111\001\002\000\050\003\uffd9\014" +
    "\uffd9\017\uffd9\020\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\054\uffd9\064\uffd9\072\uffd9\001\002\000\026" +
    "\011\101\012\073\020\102\024\104\026\077\032\072\033" +
    "\076\066\074\107\100\111\103\001\002\000\026\011\101" +
    "\012\073\020\102\024\104\026\077\032\072\033\076\066" +
    "\074\107\100\111\103\001\002\000\044\065\344\073\124" +
    "\074\113\075\116\076\114\077\117\100\107\102\106\103" +
    "\120\104\125\106\110\110\112\111\123\112\115\113\122" +
    "\114\121\115\111\001\002\000\050\003\uffda\014\uffda\017" +
    "\uffda\020\uffda\034\uffda\035\uffda\036\uffda\040\uffda\042\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\053" +
    "\uffda\054\uffda\064\uffda\072\uffda\001\002\000\104\003\uffdb" +
    "\014\uffdb\017\uffdb\020\uffdb\034\uffdb\035\uffdb\036\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\073\124\074\113\075\116\076" +
    "\114\077\117\100\107\102\106\103\120\104\125\106\110" +
    "\110\112\111\123\112\115\113\122\114\121\115\111\001" +
    "\002\000\004\020\347\001\002\000\004\063\350\001\002" +
    "\000\004\055\351\001\002\000\004\067\352\001\002\000" +
    "\044\003\uffb7\014\uffb7\017\uffb7\020\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\001\002\000\014" +
    "\023\171\025\167\027\166\030\164\031\170\001\002\000" +
    "\006\020\067\062\356\001\002\000\050\003\uffe3\014\uffe3" +
    "\017\uffe3\020\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\063\173\072\174\001\002\000\004\020" +
    "\357\001\002\000\046\003\uffdd\014\uffdd\017\uffdd\020\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\043\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd" +
    "\064\334\001\002\000\050\003\uffde\014\uffde\017\uffde\020" +
    "\uffde\034\uffde\035\uffde\036\uffde\040\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054" +
    "\uffde\064\342\072\361\001\002\000\004\070\362\001\002" +
    "\000\030\011\101\012\073\020\102\024\104\026\077\032" +
    "\072\033\076\066\074\070\362\107\100\111\103\001\002" +
    "\000\046\003\uffdc\014\uffdc\017\uffdc\020\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\063\364\001" +
    "\002\000\004\070\365\001\002\000\030\011\101\012\073" +
    "\020\102\024\104\026\077\032\072\033\076\066\074\070" +
    "\362\107\100\111\103\001\002\000\004\071\374\001\002" +
    "\000\006\063\372\071\uffd5\001\002\000\046\063\uffd3\071" +
    "\uffd3\073\124\074\113\075\116\076\114\077\117\100\107" +
    "\102\106\103\120\104\125\106\110\110\112\111\123\112" +
    "\115\113\122\114\121\115\111\001\002\000\006\063\364" +
    "\071\uffd6\001\002\000\026\011\101\012\073\020\102\024" +
    "\104\026\077\032\072\033\076\066\074\107\100\111\103" +
    "\001\002\000\046\063\uffd4\071\uffd4\073\124\074\113\075" +
    "\116\076\114\077\117\100\107\102\106\103\120\104\125" +
    "\106\110\110\112\111\123\112\115\113\122\114\121\115" +
    "\111\001\002\000\050\003\uffd8\014\uffd8\017\uffd8\020\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\040\uffd8\042\uffd8\043\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8" +
    "\063\uffd8\071\uffd8\001\002\000\004\071\376\001\002\000" +
    "\050\003\uffd7\014\uffd7\017\uffd7\020\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\063\uffd7\071\uffd7" +
    "\001\002\000\026\011\101\012\073\020\102\024\104\026" +
    "\077\032\072\033\076\066\074\107\100\111\103\001\002" +
    "\000\106\003\uffe1\004\uffe1\014\uffe1\017\uffe1\020\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\040\uffe1\042\uffe1\043\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\073" +
    "\124\074\113\075\116\076\114\077\117\100\107\102\106" +
    "\103\120\104\125\106\110\110\112\111\123\112\115\113" +
    "\122\114\121\115\111\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\002\003\034\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\027" +
    "\006\017\007\041\010\021\011\047\012\030\013\043\014" +
    "\045\015\037\016\056\017\031\020\016\021\055\022\054" +
    "\023\034\024\015\025\035\026\023\027\057\030\053\031" +
    "\033\032\051\040\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\006" +
    "\017\007\156\010\021\011\047\012\030\013\043\014\045" +
    "\015\037\016\056\017\031\020\016\021\055\022\054\023" +
    "\034\024\015\025\035\026\023\027\057\030\053\031\033" +
    "\032\051\040\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\017\013\064\014\067\040\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\144" +
    "\001\001\000\004\033\143\001\001\000\004\033\142\001" +
    "\001\000\004\033\141\001\001\000\004\033\140\001\001" +
    "\000\004\033\137\001\001\000\004\033\136\001\001\000" +
    "\004\033\135\001\001\000\004\033\134\001\001\000\004" +
    "\033\133\001\001\000\004\033\132\001\001\000\004\033" +
    "\131\001\001\000\004\033\130\001\001\000\004\033\127" +
    "\001\001\000\004\033\126\001\001\000\004\033\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\155\006\017\007\041\010" +
    "\021\011\047\012\030\013\043\014\045\015\037\016\056" +
    "\017\031\020\016\021\055\022\054\023\034\024\015\025" +
    "\035\026\023\027\057\030\053\031\033\032\051\040\020" +
    "\001\001\000\056\006\017\007\156\010\021\011\047\012" +
    "\030\013\043\014\045\015\037\016\056\017\031\020\016" +
    "\021\055\022\054\023\034\024\015\025\035\026\023\027" +
    "\057\030\053\031\033\032\051\040\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\164\001\001\000\002\001\001\000\004" +
    "\006\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\177\001\001\000\002\001\001" +
    "\000\004\011\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\204\006\017\007\041\010\021\011\047" +
    "\012\030\013\043\014\045\015\037\016\056\017\031\020" +
    "\016\021\055\022\054\023\034\024\015\025\035\026\023" +
    "\027\057\030\053\031\033\032\051\040\020\001\001\000" +
    "\056\006\017\007\156\010\021\011\047\012\030\013\043" +
    "\014\045\015\037\016\056\017\031\020\016\021\055\022" +
    "\054\023\034\024\015\025\035\026\023\027\057\030\053" +
    "\031\033\032\051\040\020\001\001\000\002\001\001\000" +
    "\004\033\207\001\001\000\002\001\001\000\004\033\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\217\006\017\007\041\010\021\011\047\012\030\013" +
    "\043\014\045\015\037\016\056\017\031\020\016\021\055" +
    "\022\054\023\034\024\015\025\035\026\023\027\057\030" +
    "\053\031\033\032\051\040\020\001\001\000\056\006\017" +
    "\007\156\010\021\011\047\012\030\013\043\014\045\015" +
    "\037\016\056\017\031\020\016\021\055\022\054\023\034" +
    "\024\015\025\035\026\023\027\057\030\053\031\033\032" +
    "\051\040\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\231\001\001\000\002\001\001\000" +
    "\004\033\233\001\001\000\002\001\001\000\060\003\235" +
    "\006\017\007\041\010\021\011\047\012\030\013\043\014" +
    "\045\015\037\016\056\017\031\020\016\021\055\022\054" +
    "\023\034\024\015\025\035\026\023\027\057\030\053\031" +
    "\033\032\051\040\020\001\001\000\056\006\017\007\156" +
    "\010\021\011\047\012\030\013\043\014\045\015\037\016" +
    "\056\017\031\020\016\021\055\022\054\023\034\024\015" +
    "\025\035\026\023\027\057\030\053\031\033\032\051\040" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\241\001\001\000\002\001\001\000\060\003\243\006" +
    "\017\007\041\010\021\011\047\012\030\013\043\014\045" +
    "\015\037\016\056\017\031\020\016\021\055\022\054\023" +
    "\034\024\015\025\035\026\023\027\057\030\053\031\033" +
    "\032\051\040\020\001\001\000\056\006\017\007\156\010" +
    "\021\011\047\012\030\013\043\014\045\015\037\016\056" +
    "\017\031\020\016\021\055\022\054\023\034\024\015\025" +
    "\035\026\023\027\057\030\053\031\033\032\051\040\020" +
    "\001\001\000\002\001\001\000\060\003\246\006\017\007" +
    "\041\010\021\011\047\012\030\013\043\014\045\015\037" +
    "\016\056\017\031\020\016\021\055\022\054\023\034\024" +
    "\015\025\035\026\023\027\057\030\053\031\033\032\051" +
    "\040\020\001\001\000\056\006\017\007\156\010\021\011" +
    "\047\012\030\013\043\014\045\015\037\016\056\017\031" +
    "\020\016\021\055\022\054\023\034\024\015\025\035\026" +
    "\023\027\057\030\053\031\033\032\051\040\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\255\001\001" +
    "\000\002\001\001\000\004\033\257\001\001\000\002\001" +
    "\001\000\004\033\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\267\006\017\007\041\010\021" +
    "\011\047\012\030\013\043\014\045\015\037\016\056\017" +
    "\031\020\016\021\055\022\054\023\034\024\015\025\035" +
    "\026\023\027\057\030\053\031\033\032\051\040\020\001" +
    "\001\000\056\006\017\007\156\010\021\011\047\012\030" +
    "\013\043\014\045\015\037\016\056\017\031\020\016\021" +
    "\055\022\054\023\034\024\015\025\035\026\023\027\057" +
    "\030\053\031\033\032\051\040\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\276\006\017\007" +
    "\041\010\021\011\047\012\030\013\043\014\045\015\037" +
    "\016\056\017\031\020\016\021\055\022\054\023\034\024" +
    "\015\025\035\026\023\027\057\030\053\031\033\032\051" +
    "\040\020\001\001\000\056\006\017\007\156\010\021\011" +
    "\047\012\030\013\043\014\045\015\037\016\056\017\031" +
    "\020\016\021\055\022\054\023\034\024\015\025\035\026" +
    "\023\027\057\030\053\031\033\032\051\040\020\001\001" +
    "\000\004\004\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\304\006\017\007\041" +
    "\010\021\011\047\012\030\013\043\014\045\015\037\016" +
    "\056\017\031\020\016\021\055\022\054\023\034\024\015" +
    "\025\035\026\023\027\057\030\053\031\033\032\051\040" +
    "\020\001\001\000\056\006\017\007\156\010\021\011\047" +
    "\012\030\013\043\014\045\015\037\016\056\017\031\020" +
    "\016\021\055\022\054\023\034\024\015\025\035\026\023" +
    "\027\057\030\053\031\033\032\051\040\020\001\001\000" +
    "\002\001\001\000\004\033\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\312\006\017\007\041\010" +
    "\021\011\047\012\030\013\043\014\045\015\037\016\056" +
    "\017\031\020\016\021\055\022\054\023\034\024\015\025" +
    "\035\026\023\027\057\030\053\031\033\032\051\040\020" +
    "\001\001\000\056\006\017\007\156\010\021\011\047\012" +
    "\030\013\043\014\045\015\037\016\056\017\031\020\016" +
    "\021\055\022\054\023\034\024\015\025\035\026\023\027" +
    "\057\030\053\031\033\032\051\040\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\317\006\017\007\041\010\021\011\047\012\030\013\043" +
    "\014\045\015\037\016\056\017\031\020\016\021\055\022" +
    "\054\023\034\024\015\025\035\026\023\027\057\030\053" +
    "\031\033\032\051\040\020\001\001\000\056\006\017\007" +
    "\156\010\021\011\047\012\030\013\043\014\045\015\037" +
    "\016\056\017\031\020\016\021\055\022\054\023\034\024" +
    "\015\025\035\026\023\027\057\030\053\031\033\032\051" +
    "\040\020\001\001\000\002\001\001\000\004\033\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\325" +
    "\006\017\007\041\010\021\011\047\012\030\013\043\014" +
    "\045\015\037\016\056\017\031\020\016\021\055\022\054" +
    "\023\034\024\015\025\035\026\023\027\057\030\053\031" +
    "\033\032\051\040\020\001\001\000\056\006\017\007\156" +
    "\010\021\011\047\012\030\013\043\014\045\015\037\016" +
    "\056\017\031\020\016\021\055\022\054\023\034\024\015" +
    "\025\035\026\023\027\057\030\053\031\033\032\051\040" +
    "\020\001\001\000\002\001\001\000\004\033\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\336\001\001\000\004\033\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\344\001\001\000\004\033\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\353\001\001\000\004\006\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\357" +
    "\001\001\000\002\001\001\000\004\037\362\001\001\000" +
    "\012\033\367\037\370\042\374\043\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\367\037\370\042" +
    "\365\043\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\377\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Instruccion> AST;
    ArrayList<String> listVAR = new ArrayList<String>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= pistas INDENT_A instrucciones INDENT_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.AST=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pistas ::= PISTA NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pistas ::= PISTA NOMBRE EXTIENDE parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= parametros COMA NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= declaracion_variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion_variables2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= asignacion_variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= arreglos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion_arreglo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= para1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= para2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= continuar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= retorna 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= hacer_mientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= reproducir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= esperar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= ordenar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= salir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= incremental 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= NOMBRE SUMA_SIMPLIFICADA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SumaSimplificada(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		 System.err.println("error :( ..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // imprimir ::= IMPRIMIR PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Imprimir(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_variables ::= keep VAR tipo_variable vars_id 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo b = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Declaracion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_variables2 ::= keep VAR tipo_variable vars_id IGUAL expresion 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo b = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Declaracion(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacion_variables ::= vars_id IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Asignacion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vars_id ::= vars_id COMA NOMBRE 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l; RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vars_id ::= NOMBRE 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE lista_Dimension 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE lista_Dimension IGUAL lista_expresiones2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion_arreglo ::= NOMBRE lista_Dimension IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_Dimension ::= lista_Dimension CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=Integer.parseInt(lst.toString())+1;  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_Dimension",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_Dimension ::= CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 RESULT=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_Dimension",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_expresiones2 ::= lista_expresiones2 COMA LLAVE_ABRE valores LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_expresiones2 ::= LLAVE_ABRE valores LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valores ::= lista_expresiones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valores ::= sub_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sub_expresion ::= sub_expresion COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sub_expresion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_variable ::= CADENA 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.CADENA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_variable ::= ENTERO 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.NUMERO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_variable ::= DECIMAL 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.DECIMAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_variable ::= CHAR 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.CARACTER;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_variable ::= BOOLEAN 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // incremental ::= NOMBRE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Incremento(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremental",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // incremental ::= NOMBRE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Decremento(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremental",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C SINO INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C sino_si 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new If(a,b,c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C sino_si SINO INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,l,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sino_si ::= sino_si SINO SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= l; RESULT.add(new If(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sino_si ::= SINO SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new If(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch ::= SWITCH PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A lista_casos DEFAULT INDENT_A instrucciones INDENT_C INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Switch(a, null, b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_casos ::= lista_casos CASO expresion INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= l; RESULT.add(new Case(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_casos ::= CASO expresion INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new Case(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // para1 ::= PARA PARENTESIS_ABRE declaracion_variables2 PTCOMA expresion PTCOMA incremental PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Para1(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // para2 ::= PARA PARENTESIS_ABRE asignacion_variables PTCOMA expresion PTCOMA incremental PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Para1(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // hacer_mientras ::= HACER PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C MIENTRAS PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer_mientras",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mientras ::= MIENTRAS PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // continuar ::= CONTINUAR 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // salir ::= SALIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Salir(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // retorna ::= RETORNA expresion 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorna",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // keep ::= KEEP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keep",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // keep ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keep",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reproducir ::= REPRODUCIR PARENTESIS_ABRE NOTAS_MUSICALES COMA expresion COMA expresion COMA expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int octavaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int octavaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operacion octava = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion tiempo = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion canal = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // esperar ::= ESPERAR PARENTESIS_ABRE expresion COMA expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ordenar ::= ORDENAR PARENTESIS_ABRE NOMBRE COMA TIPOS_ORDENAMIENTO PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sumarizar ::= SUMARIZAR PARENTESIS_ABRE NOMBRE PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sumarizar ::= SUMARIZAR PARENTESIS_ABRE lista_expresiones2 PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion SUMA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion RESTA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion DIVISION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion POTENCIA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MODULO expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion IGUALACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUALACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENCIACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion MAYORQUE expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion MENORQUE expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion MENORIGUAL expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion OR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion XOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion AND expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion NAND expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NAND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= RESTA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= NOT expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ENTEROO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Integer(a)," "," ","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= DECIMALL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= TRUE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= FALSE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= NOMBRE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= CADENAA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a.substring(1, a.length() - 1),Operacion.Tipo_operacion.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= CHARR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a.substring(1, a.length() - 1),Operacion.Tipo_operacion.CARACTER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
