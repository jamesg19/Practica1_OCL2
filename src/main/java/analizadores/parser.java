
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.Simbolo.Tipo;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\040\004\000\002\040\006" +
    "\000\002\041\005\000\002\041\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\003\000\002\035\010" +
    "\000\002\011\006\000\002\014\006\000\002\015\010\000" +
    "\002\016\005\000\002\007\005\000\002\007\003\000\002" +
    "\017\010\000\002\017\007\000\002\017\012\000\002\020" +
    "\006\000\002\042\006\000\002\042\005\000\002\043\007" +
    "\000\002\043\005\000\002\046\003\000\002\046\003\000" +
    "\002\047\005\000\002\047\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\013\004\000\002\013\004\000\002\021\011" +
    "\000\002\021\015\000\002\021\012\000\002\021\016\000" +
    "\002\004\013\000\002\004\012\000\002\022\015\000\002" +
    "\005\010\000\002\005\007\000\002\023\015\000\002\024" +
    "\015\000\002\031\012\000\002\025\011\000\002\026\003" +
    "\000\002\027\003\000\002\030\004\000\002\044\003\000" +
    "\002\044\002\000\002\032\014\000\002\033\010\000\002" +
    "\050\003\000\002\034\010\000\002\051\006\000\002\051" +
    "\006\000\002\012\006\000\002\036\013\000\002\006\006" +
    "\000\002\006\004\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\004\000\002" +
    "\037\004\000\002\037\005\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\021\006\001\002\000\004\002\u010c\001" +
    "\002\000\004\013\015\001\002\000\004\020\007\001\002" +
    "\000\006\013\ufffd\022\010\001\002\000\004\020\012\001" +
    "\002\000\006\013\ufffc\063\013\001\002\000\006\013\ufffa" +
    "\063\ufffa\001\002\000\004\020\014\001\002\000\006\013" +
    "\ufffb\063\ufffb\001\002\000\046\003\051\017\027\020\026" +
    "\034\043\035\uffb7\036\030\040\056\042\045\043\041\045" +
    "\066\046\035\047\064\050\053\051\050\053\065\054\024" +
    "\060\023\061\033\001\002\000\050\003\uffec\014\uffec\017" +
    "\uffec\020\uffec\034\uffec\035\uffec\036\uffec\040\uffec\042\uffec" +
    "\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053" +
    "\uffec\054\uffec\060\uffec\061\uffec\001\002\000\050\003\ufff0" +
    "\014\ufff0\017\ufff0\020\ufff0\034\ufff0\035\ufff0\036\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\053\ufff0\054\ufff0\060\ufff0\061\ufff0\001\002\000" +
    "\006\063\201\072\u010a\001\002\000\004\035\366\001\002" +
    "\000\050\003\ufff9\014\ufff9\017\ufff9\020\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\060\ufff9\061" +
    "\ufff9\001\002\000\004\066\363\001\002\000\004\066\356" +
    "\001\002\000\050\003\uffeb\014\uffeb\017\uffeb\020\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\060" +
    "\uffeb\061\uffeb\001\002\000\016\005\166\006\165\007\345" +
    "\063\uffdc\064\344\072\uffdc\001\002\000\004\066\340\001" +
    "\002\000\004\066\303\001\002\000\050\003\051\014\302" +
    "\017\027\020\026\034\043\035\uffb7\036\030\040\056\042" +
    "\045\043\041\045\066\046\035\047\064\050\053\051\050" +
    "\053\065\054\024\060\023\061\033\001\002\000\050\003" +
    "\ufff7\014\ufff7\017\ufff7\020\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\040\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\060\ufff7\061\ufff7\001\002" +
    "\000\004\066\275\001\002\000\050\003\ufff1\014\ufff1\017" +
    "\ufff1\020\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1" +
    "\043\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\053" +
    "\ufff1\054\ufff1\060\ufff1\061\ufff1\001\002\000\004\066\267" +
    "\001\002\000\050\003\uffe8\014\uffe8\017\uffe8\020\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\060" +
    "\uffe8\061\uffe8\001\002\000\050\003\uffe6\014\uffe6\017\uffe6" +
    "\020\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\042\uffe6\043" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6" +
    "\054\uffe6\060\uffe6\061\uffe6\001\002\000\050\003\uffed\014" +
    "\uffed\017\uffed\020\uffed\034\uffed\035\uffed\036\uffed\040\uffed" +
    "\042\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\053\uffed\054\uffed\060\uffed\061\uffed\001\002\000\050" +
    "\003\uffbb\014\uffbb\017\uffbb\020\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\053\uffbb\054\uffbb\060\uffbb\061\uffbb\001" +
    "\002\000\050\003\ufff4\014\ufff4\017\ufff4\020\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\060\ufff4" +
    "\061\ufff4\001\002\000\004\035\uffb8\001\002\000\050\003" +
    "\ufffe\014\ufffe\017\ufffe\020\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\040\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\054\ufffe\060\ufffe\061\ufffe\001\002" +
    "\000\050\003\uffba\014\uffba\017\uffba\020\uffba\034\uffba\035" +
    "\uffba\036\uffba\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\053\uffba\054\uffba\060\uffba\061" +
    "\uffba\001\002\000\050\003\ufff6\014\ufff6\017\ufff6\020\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\060\ufff6\061\ufff6\001\002\000\050\003\ufff5\014\ufff5\017" +
    "\ufff5\020\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5" +
    "\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\060\ufff5\061\ufff5\001\002\000\004\066\256" +
    "\001\002\000\050\003\uffe3\014\uffe3\017\uffe3\020\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\043\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3\060" +
    "\uffe3\061\uffe3\001\002\000\050\003\uffe5\014\uffe5\017\uffe5" +
    "\020\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5" +
    "\054\uffe5\060\uffe5\061\uffe5\001\002\000\026\011\105\012" +
    "\077\020\106\024\110\026\103\032\076\033\101\066\100" +
    "\107\104\111\107\001\002\000\050\003\ufff2\014\ufff2\017" +
    "\ufff2\020\ufff2\034\ufff2\035\ufff2\036\ufff2\040\ufff2\042\ufff2" +
    "\043\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\053" +
    "\ufff2\054\ufff2\060\ufff2\061\ufff2\001\002\000\050\003\uffe7" +
    "\014\uffe7\017\uffe7\020\uffe7\034\uffe7\035\uffe7\036\uffe7\040" +
    "\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\053\uffe7\054\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\004\066\231\001\002\000\050\003\uffe9\014\uffe9\017\uffe9" +
    "\020\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\042\uffe9\043" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9" +
    "\054\uffe9\060\uffe9\061\uffe9\001\002\000\050\003\uffee\014" +
    "\uffee\017\uffee\020\uffee\034\uffee\035\uffee\036\uffee\040\uffee" +
    "\042\uffee\043\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\053\uffee\054\uffee\060\uffee\061\uffee\001\002\000\050" +
    "\003\uffef\014\uffef\017\uffef\020\uffef\034\uffef\035\uffef\036" +
    "\uffef\040\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\053\uffef\054\uffef\060\uffef\061\uffef\001" +
    "\002\000\050\003\ufff3\014\ufff3\017\ufff3\020\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\060\ufff3" +
    "\061\ufff3\001\002\000\050\003\uffea\014\uffea\017\uffea\020" +
    "\uffea\034\uffea\035\uffea\036\uffea\040\uffea\042\uffea\043\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea\054" +
    "\uffea\060\uffea\061\uffea\001\002\000\004\013\222\001\002" +
    "\000\004\066\215\001\002\000\004\066\070\001\002\000" +
    "\050\003\ufff8\014\ufff8\017\ufff8\020\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\040\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\053\ufff8\054\ufff8\060\ufff8\061\ufff8" +
    "\001\002\000\010\020\073\034\043\035\uffb7\001\002\000" +
    "\004\004\205\001\002\000\004\035\171\001\002\000\054" +
    "\003\uffdc\014\uffdc\017\uffdc\020\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\053\uffdc\054\uffdc\060\uffdc\061\uffdc\063" +
    "\uffdc\072\uffdc\001\002\000\004\004\075\001\002\000\026" +
    "\011\105\012\077\020\106\024\110\026\103\032\076\033" +
    "\101\066\100\107\104\111\107\001\002\000\126\003\uff96" +
    "\004\uff96\013\uff96\014\uff96\017\uff96\020\uff96\034\uff96\035" +
    "\uff96\036\uff96\040\uff96\042\uff96\043\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\053\uff96\054\uff96\060\uff96\061" +
    "\uff96\063\uff96\065\uff96\067\uff96\071\uff96\073\uff96\074\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96\103\uff96\104" +
    "\uff96\105\uff96\106\uff96\110\uff96\111\uff96\112\uff96\113\uff96" +
    "\114\uff96\115\uff96\001\002\000\126\003\uff92\004\uff92\013" +
    "\uff92\014\uff92\017\uff92\020\uff92\034\uff92\035\uff92\036\uff92" +
    "\040\uff92\042\uff92\043\uff92\045\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\053\uff92\054\uff92\060\uff92\061\uff92\063\uff92" +
    "\065\uff92\067\uff92\071\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\077\uff92\100\uff92\102\uff92\103\uff92\104\uff92\105\uff92" +
    "\106\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\001\002\000\026\011\105\012\077\020\106\024\110" +
    "\026\103\032\076\033\101\066\100\107\104\111\107\001" +
    "\002\000\126\003\uff95\004\uff95\013\uff95\014\uff95\017\uff95" +
    "\020\uff95\034\uff95\035\uff95\036\uff95\040\uff95\042\uff95\043" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\053\uff95" +
    "\054\uff95\060\uff95\061\uff95\063\uff95\065\uff95\067\uff95\071" +
    "\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95" +
    "\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\110\uff95\111" +
    "\uff95\112\uff95\113\uff95\114\uff95\115\uff95\001\002\000\046" +
    "\004\155\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\113\103\124\104\132\105\131\106\114\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\126\003\uff97\004\uff97\013\uff97\014\uff97\017\uff97\020\uff97" +
    "\034\uff97\035\uff97\036\uff97\040\uff97\042\uff97\043\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\053\uff97\054\uff97" +
    "\060\uff97\061\uff97\063\uff97\065\uff97\067\uff97\071\uff97\073" +
    "\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\102\uff97" +
    "\103\uff97\104\uff97\105\uff97\106\uff97\110\uff97\111\uff97\112" +
    "\uff97\113\uff97\114\uff97\115\uff97\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\126\003\uff93\004\uff93" +
    "\013\uff93\014\uff93\017\uff93\020\uff93\034\uff93\035\uff93\036" +
    "\uff93\040\uff93\042\uff93\043\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\053\uff93\054\uff93\060\uff93\061\uff93\063" +
    "\uff93\065\uff93\067\uff93\071\uff93\073\uff93\074\uff93\075\uff93" +
    "\076\uff93\077\uff93\100\uff93\102\uff93\103\uff93\104\uff93\105" +
    "\uff93\106\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93" +
    "\115\uff93\001\002\000\126\003\uff94\004\uff94\013\uff94\014" +
    "\uff94\017\uff94\020\uff94\034\uff94\035\uff94\036\uff94\040\uff94" +
    "\042\uff94\043\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051" +
    "\uff94\053\uff94\054\uff94\060\uff94\061\uff94\063\uff94\065\uff94" +
    "\067\uff94\071\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077" +
    "\uff94\100\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94" +
    "\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\001" +
    "\002\000\026\011\105\012\077\020\106\024\110\026\103" +
    "\032\076\033\101\066\100\107\104\111\107\001\002\000" +
    "\126\003\uff98\004\uff98\013\uff98\014\uff98\017\uff98\020\uff98" +
    "\034\uff98\035\uff98\036\uff98\040\uff98\042\uff98\043\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\053\uff98\054\uff98" +
    "\060\uff98\061\uff98\063\uff98\065\uff98\067\uff98\071\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\102\uff98" +
    "\103\uff98\104\uff98\105\uff98\106\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\114\uff98\115\uff98\001\002\000\126\003\uff9b" +
    "\004\uff9b\013\uff9b\014\uff9b\017\uff9b\020\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\042\uff9b\043\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b\060\uff9b\061" +
    "\uff9b\063\uff9b\065\uff9b\067\uff9b\071\uff9b\073\uff9b\074\uff9b" +
    "\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b" +
    "\114\uff9b\115\uff9b\001\002\000\026\011\105\012\077\020" +
    "\106\024\110\026\103\032\076\033\101\066\100\107\104" +
    "\111\107\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\026\011\105\012\077\020\106\024\110\026" +
    "\103\032\076\033\101\066\100\107\104\111\107\001\002" +
    "\000\026\011\105\012\077\020\106\024\110\026\103\032" +
    "\076\033\101\066\100\107\104\111\107\001\002\000\026" +
    "\011\105\012\077\020\106\024\110\026\103\032\076\033" +
    "\101\066\100\107\104\111\107\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\026\011\105\012\077" +
    "\020\106\024\110\026\103\032\076\033\101\066\100\107" +
    "\104\111\107\001\002\000\026\011\105\012\077\020\106" +
    "\024\110\026\103\032\076\033\101\066\100\107\104\111" +
    "\107\001\002\000\026\011\105\012\077\020\106\024\110" +
    "\026\103\032\076\033\101\066\100\107\104\111\107\001" +
    "\002\000\026\011\105\012\077\020\106\024\110\026\103" +
    "\032\076\033\101\066\100\107\104\111\107\001\002\000" +
    "\026\011\105\012\077\020\106\024\110\026\103\032\076" +
    "\033\101\066\100\107\104\111\107\001\002\000\026\011" +
    "\105\012\077\020\106\024\110\026\103\032\076\033\101" +
    "\066\100\107\104\111\107\001\002\000\026\011\105\012" +
    "\077\020\106\024\110\026\103\032\076\033\101\066\100" +
    "\107\104\111\107\001\002\000\026\011\105\012\077\020" +
    "\106\024\110\026\103\032\076\033\101\066\100\107\104" +
    "\111\107\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\026\011\105\012\077\020\106\024\110\026" +
    "\103\032\076\033\101\066\100\107\104\111\107\001\002" +
    "\000\026\011\105\012\077\020\106\024\110\026\103\032" +
    "\076\033\101\066\100\107\104\111\107\001\002\000\126" +
    "\003\uffa0\004\uffa0\013\uffa0\014\uffa0\017\uffa0\020\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\054\uffa0\060" +
    "\uffa0\061\uffa0\063\uffa0\065\uffa0\067\uffa0\071\uffa0\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\uffa0\105\uffa0\106\uffa0\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\126\003\uff9f\004" +
    "\uff9f\013\uff9f\014\uff9f\017\uff9f\020\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\040\uff9f\042\uff9f\043\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\053\uff9f\054\uff9f\060\uff9f\061\uff9f" +
    "\063\uff9f\065\uff9f\067\uff9f\071\uff9f\073\127\074\117\075" +
    "\122\076\120\077\123\100\112\102\113\103\124\104\uff9f" +
    "\105\uff9f\106\uff9f\110\116\111\130\112\121\113\126\114" +
    "\125\115\115\001\002\000\126\003\uffab\004\uffab\013\uffab" +
    "\014\uffab\017\uffab\020\uffab\034\uffab\035\uffab\036\uffab\040" +
    "\uffab\042\uffab\043\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\053\uffab\054\uffab\060\uffab\061\uffab\063\uffab\065" +
    "\uffab\067\uffab\071\uffab\073\uffab\074\uffab\075\uffab\076\uffab" +
    "\077\uffab\100\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106" +
    "\uffab\110\uffab\111\uffab\112\121\113\126\114\125\115\115" +
    "\001\002\000\126\003\uffa6\004\uffa6\013\uffa6\014\uffa6\017" +
    "\uffa6\020\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\042\uffa6" +
    "\043\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\053" +
    "\uffa6\054\uffa6\060\uffa6\061\uffa6\063\uffa6\065\uffa6\067\uffa6" +
    "\071\uffa6\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\126\003\uffa9\004\uffa9\013\uffa9\014\uffa9\017\uffa9\020\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9" +
    "\060\uffa9\061\uffa9\063\uffa9\065\uffa9\067\uffa9\071\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9" +
    "\103\uffa9\104\uffa9\105\uffa9\106\uffa9\110\uffa9\111\uffa9\112" +
    "\uffa9\113\uffa9\114\uffa9\115\115\001\002\000\126\003\uffa7" +
    "\004\uffa7\013\uffa7\014\uffa7\017\uffa7\020\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\040\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\060\uffa7\061" +
    "\uffa7\063\uffa7\065\uffa7\067\uffa7\071\uffa7\073\uffa7\074\uffa7" +
    "\075\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7" +
    "\114\uffa7\115\115\001\002\000\126\003\uff9c\004\uff9c\013" +
    "\uff9c\014\uff9c\017\uff9c\020\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\040\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\053\uff9c\054\uff9c\060\uff9c\061\uff9c\063\uff9c" +
    "\065\uff9c\067\uff9c\071\uff9c\073\127\074\117\075\122\076" +
    "\120\077\123\100\112\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\110\116\111\130\112\121\113\126\114\125\115" +
    "\115\001\002\000\126\003\uffa2\004\uffa2\013\uffa2\014\uffa2" +
    "\017\uffa2\020\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2\042" +
    "\uffa2\043\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\053\uffa2\054\uffa2\060\uffa2\061\uffa2\063\uffa2\065\uffa2\067" +
    "\uffa2\071\uffa2\073\127\074\117\075\122\076\120\077\123" +
    "\100\112\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\110" +
    "\116\111\130\112\121\113\126\114\125\115\115\001\002" +
    "\000\126\003\uffa4\004\uffa4\013\uffa4\014\uffa4\017\uffa4\020" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\054" +
    "\uffa4\060\uffa4\061\uffa4\063\uffa4\065\uffa4\067\uffa4\071\uffa4" +
    "\073\127\074\117\075\122\076\120\077\123\100\112\102" +
    "\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\110\116\111\130" +
    "\112\121\113\126\114\125\115\115\001\002\000\126\003" +
    "\uffaa\004\uffaa\013\uffaa\014\uffaa\017\uffaa\020\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\040\uffaa\042\uffaa\043\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\060\uffaa" +
    "\061\uffaa\063\uffaa\065\uffaa\067\uffaa\071\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\110\uffaa\111\uffaa\112\uffaa\113" +
    "\uffaa\114\uffaa\115\115\001\002\000\126\003\uffa3\004\uffa3" +
    "\013\uffa3\014\uffa3\017\uffa3\020\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\053\uffa3\054\uffa3\060\uffa3\061\uffa3\063" +
    "\uffa3\065\uffa3\067\uffa3\071\uffa3\073\127\074\117\075\122" +
    "\076\120\077\123\100\112\102\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\110\116\111\130\112\121\113\126\114\125" +
    "\115\115\001\002\000\126\003\uffa5\004\uffa5\013\uffa5\014" +
    "\uffa5\017\uffa5\020\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5" +
    "\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\054\uffa5\060\uffa5\061\uffa5\063\uffa5\065\uffa5" +
    "\067\uffa5\071\uffa5\073\127\074\117\075\122\076\120\077" +
    "\123\100\112\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\110\116\111\130\112\121\113\126\114\125\115\115\001" +
    "\002\000\126\003\uffac\004\uffac\013\uffac\014\uffac\017\uffac" +
    "\020\uffac\034\uffac\035\uffac\036\uffac\040\uffac\042\uffac\043" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\053\uffac" +
    "\054\uffac\060\uffac\061\uffac\063\uffac\065\uffac\067\uffac\071" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\110\uffac\111" +
    "\uffac\112\121\113\126\114\125\115\115\001\002\000\126" +
    "\003\uffa8\004\uffa8\013\uffa8\014\uffa8\017\uffa8\020\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\060" +
    "\uffa8\061\uffa8\063\uffa8\065\uffa8\067\uffa8\071\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\110\uffa8\111\uffa8\112\uffa8" +
    "\113\uffa8\114\uffa8\115\uffa8\001\002\000\126\003\uff9e\004" +
    "\uff9e\013\uff9e\014\uff9e\017\uff9e\020\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\040\uff9e\042\uff9e\043\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\060\uff9e\061\uff9e" +
    "\063\uff9e\065\uff9e\067\uff9e\071\uff9e\073\127\074\117\075" +
    "\122\076\120\077\123\100\112\102\113\103\124\104\uff9e" +
    "\105\uff9e\106\uff9e\110\116\111\130\112\121\113\126\114" +
    "\125\115\115\001\002\000\126\003\uff9d\004\uff9d\013\uff9d" +
    "\014\uff9d\017\uff9d\020\uff9d\034\uff9d\035\uff9d\036\uff9d\040" +
    "\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\053\uff9d\054\uff9d\060\uff9d\061\uff9d\063\uff9d\065" +
    "\uff9d\067\uff9d\071\uff9d\073\127\074\117\075\122\076\120" +
    "\077\123\100\112\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\110\116\111\130\112\121\113\126\114\125\115\115" +
    "\001\002\000\126\003\uffa1\004\uffa1\013\uffa1\014\uffa1\017" +
    "\uffa1\020\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\042\uffa1" +
    "\043\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053" +
    "\uffa1\054\uffa1\060\uffa1\061\uffa1\063\uffa1\065\uffa1\067\uffa1" +
    "\071\uffa1\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\126\003\uff9a\004\uff9a\013\uff9a\014\uff9a\017\uff9a\020\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\040\uff9a\042\uff9a\043\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a" +
    "\060\uff9a\061\uff9a\063\uff9a\065\uff9a\067\uff9a\071\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102\uff9a" +
    "\103\uff9a\104\uff9a\105\uff9a\106\uff9a\110\uff9a\111\uff9a\112" +
    "\uff9a\113\uff9a\114\uff9a\115\uff9a\001\002\000\004\020\156" +
    "\001\002\000\006\005\166\006\165\001\002\000\004\067" +
    "\160\001\002\000\004\013\161\001\002\000\046\003\051" +
    "\017\027\020\026\034\043\035\uffb7\036\030\040\056\042" +
    "\045\043\041\045\066\046\035\047\064\050\053\051\050" +
    "\053\065\054\024\060\023\061\033\001\002\000\050\003" +
    "\051\014\164\017\027\020\026\034\043\035\uffb7\036\030" +
    "\040\056\042\045\043\041\045\066\046\035\047\064\050" +
    "\053\051\050\053\065\054\024\060\023\061\033\001\002" +
    "\000\050\003\uffff\014\uffff\017\uffff\020\uffff\034\uffff\035" +
    "\uffff\036\uffff\040\uffff\042\uffff\043\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\053\uffff\054\uffff\060\uffff\061" +
    "\uffff\001\002\000\050\003\uffbe\014\uffbe\017\uffbe\020\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe" +
    "\060\uffbe\061\uffbe\001\002\000\052\003\uffc9\014\uffc9\017" +
    "\uffc9\020\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\042\uffc9" +
    "\043\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053" +
    "\uffc9\054\uffc9\060\uffc9\061\uffc9\067\uffc9\001\002\000\052" +
    "\003\uffca\014\uffca\017\uffca\020\uffca\034\uffca\035\uffca\036" +
    "\uffca\040\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\053\uffca\054\uffca\060\uffca\061\uffca\067" +
    "\uffca\001\002\000\046\067\170\073\127\074\117\075\122" +
    "\076\120\077\123\100\112\102\113\103\124\104\132\105" +
    "\131\106\114\110\116\111\130\112\121\113\126\114\125" +
    "\115\115\001\002\000\126\003\uff99\004\uff99\013\uff99\014" +
    "\uff99\017\uff99\020\uff99\034\uff99\035\uff99\036\uff99\040\uff99" +
    "\042\uff99\043\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\053\uff99\054\uff99\060\uff99\061\uff99\063\uff99\065\uff99" +
    "\067\uff99\071\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\100\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99" +
    "\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\001" +
    "\002\000\014\023\177\025\175\027\174\030\172\031\176" +
    "\001\002\000\006\020\uffcc\062\uffcc\001\002\000\004\020" +
    "\073\001\002\000\006\020\uffcb\062\uffcb\001\002\000\006" +
    "\020\uffcd\062\uffcd\001\002\000\006\020\uffcf\062\uffcf\001" +
    "\002\000\006\020\uffce\062\uffce\001\002\000\006\063\201" +
    "\072\202\001\002\000\004\020\204\001\002\000\026\011" +
    "\105\012\077\020\106\024\110\026\103\032\076\033\101" +
    "\066\100\107\104\111\107\001\002\000\114\003\uffdf\004" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\053\uffdf\054\uffdf\060\uffdf\061\uffdf\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\132\105\131\106\114\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\054\003\uffdd\014" +
    "\uffdd\017\uffdd\020\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\060\uffdd\061\uffdd\063\uffdd\072\uffdd" +
    "\001\002\000\026\011\105\012\077\020\106\024\110\026" +
    "\103\032\076\033\101\066\100\107\104\111\107\001\002" +
    "\000\046\004\207\073\127\074\117\075\122\076\120\077" +
    "\123\100\112\102\113\103\124\104\132\105\131\106\114" +
    "\110\116\111\130\112\121\113\126\114\125\115\115\001" +
    "\002\000\004\020\156\001\002\000\004\067\211\001\002" +
    "\000\004\013\212\001\002\000\046\003\051\017\027\020" +
    "\026\034\043\035\uffb7\036\030\040\056\042\045\043\041" +
    "\045\066\046\035\047\064\050\053\051\050\053\065\054" +
    "\024\060\023\061\033\001\002\000\050\003\051\014\214" +
    "\017\027\020\026\034\043\035\uffb7\036\030\040\056\042" +
    "\045\043\041\045\066\046\035\047\064\050\053\051\050" +
    "\053\065\054\024\060\023\061\033\001\002\000\050\003" +
    "\uffbf\014\uffbf\017\uffbf\020\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\040\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\054\uffbf\060\uffbf\061\uffbf\001\002" +
    "\000\026\011\105\012\077\020\106\024\110\026\103\032" +
    "\076\033\101\066\100\107\104\111\107\001\002\000\046" +
    "\063\217\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\113\103\124\104\132\105\131\106\114\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\026\011\105\012\077\020\106\024\110\026\103\032\076" +
    "\033\101\066\100\107\104\111\107\001\002\000\046\067" +
    "\221\073\127\074\117\075\122\076\120\077\123\100\112" +
    "\102\113\103\124\104\132\105\131\106\114\110\116\111" +
    "\130\112\121\113\126\114\125\115\115\001\002\000\050" +
    "\003\uffb5\014\uffb5\017\uffb5\020\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\053\uffb5\054\uffb5\060\uffb5\061\uffb5\001" +
    "\002\000\046\003\051\017\027\020\026\034\043\035\uffb7" +
    "\036\030\040\056\042\045\043\041\045\066\046\035\047" +
    "\064\050\053\051\050\053\065\054\024\060\023\061\033" +
    "\001\002\000\050\003\051\014\224\017\027\020\026\034" +
    "\043\035\uffb7\036\030\040\056\042\045\043\041\045\066" +
    "\046\035\047\064\050\053\051\050\053\065\054\024\060" +
    "\023\061\033\001\002\000\004\046\225\001\002\000\004" +
    "\066\226\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\046\067\230\073\127\074\117\075\122\076" +
    "\120\077\123\100\112\102\113\103\124\104\132\105\131" +
    "\106\114\110\116\111\130\112\121\113\126\114\125\115" +
    "\115\001\002\000\050\003\uffbd\014\uffbd\017\uffbd\020\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\040\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd" +
    "\060\uffbd\061\uffbd\001\002\000\026\011\105\012\077\020" +
    "\106\024\110\026\103\032\076\033\101\066\100\107\104" +
    "\111\107\001\002\000\046\067\233\073\127\074\117\075" +
    "\122\076\120\077\123\100\112\102\113\103\124\104\132" +
    "\105\131\106\114\110\116\111\130\112\121\113\126\114" +
    "\125\115\115\001\002\000\004\013\234\001\002\000\004" +
    "\041\236\001\002\000\006\041\244\044\243\001\002\000" +
    "\026\011\105\012\077\020\106\024\110\026\103\032\076" +
    "\033\101\066\100\107\104\111\107\001\002\000\046\013" +
    "\240\073\127\074\117\075\122\076\120\077\123\100\112" +
    "\102\113\103\124\104\132\105\131\106\114\110\116\111" +
    "\130\112\121\113\126\114\125\115\115\001\002\000\046" +
    "\003\051\017\027\020\026\034\043\035\uffb7\036\030\040" +
    "\056\042\045\043\041\045\066\046\035\047\064\050\053" +
    "\051\050\053\065\054\024\060\023\061\033\001\002\000" +
    "\050\003\051\014\242\017\027\020\026\034\043\035\uffb7" +
    "\036\030\040\056\042\045\043\041\045\066\046\035\047" +
    "\064\050\053\051\050\053\065\054\024\060\023\061\033" +
    "\001\002\000\006\041\uffc0\044\uffc0\001\002\000\004\013" +
    "\251\001\002\000\026\011\105\012\077\020\106\024\110" +
    "\026\103\032\076\033\101\066\100\107\104\111\107\001" +
    "\002\000\046\013\246\073\127\074\117\075\122\076\120" +
    "\077\123\100\112\102\113\103\124\104\132\105\131\106" +
    "\114\110\116\111\130\112\121\113\126\114\125\115\115" +
    "\001\002\000\046\003\051\017\027\020\026\034\043\035" +
    "\uffb7\036\030\040\056\042\045\043\041\045\066\046\035" +
    "\047\064\050\053\051\050\053\065\054\024\060\023\061" +
    "\033\001\002\000\050\003\051\014\250\017\027\020\026" +
    "\034\043\035\uffb7\036\030\040\056\042\045\043\041\045" +
    "\066\046\035\047\064\050\053\051\050\053\065\054\024" +
    "\060\023\061\033\001\002\000\006\041\uffc1\044\uffc1\001" +
    "\002\000\046\003\051\017\027\020\026\034\043\035\uffb7" +
    "\036\030\040\056\042\045\043\041\045\066\046\035\047" +
    "\064\050\053\051\050\053\065\054\024\060\023\061\033" +
    "\001\002\000\050\003\051\014\253\017\027\020\026\034" +
    "\043\035\uffb7\036\030\040\056\042\045\043\041\045\066" +
    "\046\035\047\064\050\053\051\050\053\065\054\024\060" +
    "\023\061\033\001\002\000\004\014\254\001\002\000\050" +
    "\003\uffc2\014\uffc2\017\uffc2\020\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\040\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\053\uffc2\054\uffc2\060\uffc2\061\uffc2\001" +
    "\002\000\112\003\uffb9\014\uffb9\017\uffb9\020\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\060\uffb9" +
    "\061\uffb9\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\113\103\124\104\132\105\131\106\114\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\004\052\257\001\002\000\004\063\260\001\002\000\026" +
    "\011\105\012\077\020\106\024\110\026\103\032\076\033" +
    "\101\066\100\107\104\111\107\001\002\000\046\063\262" +
    "\073\127\074\117\075\122\076\120\077\123\100\112\102" +
    "\113\103\124\104\132\105\131\106\114\110\116\111\130" +
    "\112\121\113\126\114\125\115\115\001\002\000\026\011" +
    "\105\012\077\020\106\024\110\026\103\032\076\033\101" +
    "\066\100\107\104\111\107\001\002\000\046\063\264\073" +
    "\127\074\117\075\122\076\120\077\123\100\112\102\113" +
    "\103\124\104\132\105\131\106\114\110\116\111\130\112" +
    "\121\113\126\114\125\115\115\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\046\067\266\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\132\105\131\106\114\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\050\003\uffb6\014" +
    "\uffb6\017\uffb6\020\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6" +
    "\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\053\uffb6\054\uffb6\060\uffb6\061\uffb6\001\002\000\026" +
    "\011\105\012\077\020\106\024\110\026\103\032\076\033" +
    "\101\066\100\107\104\111\107\001\002\000\046\067\271" +
    "\073\127\074\117\075\122\076\120\077\123\100\112\102" +
    "\113\103\124\104\132\105\131\106\114\110\116\111\130" +
    "\112\121\113\126\114\125\115\115\001\002\000\004\013" +
    "\272\001\002\000\046\003\051\017\027\020\026\034\043" +
    "\035\uffb7\036\030\040\056\042\045\043\041\045\066\046" +
    "\035\047\064\050\053\051\050\053\065\054\024\060\023" +
    "\061\033\001\002\000\050\003\051\014\274\017\027\020" +
    "\026\034\043\035\uffb7\036\030\040\056\042\045\043\041" +
    "\045\066\046\035\047\064\050\053\051\050\053\065\054" +
    "\024\060\023\061\033\001\002\000\050\003\uffbc\014\uffbc" +
    "\017\uffbc\020\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\053\uffbc\054\uffbc\060\uffbc\061\uffbc\001\002\000\004\067" +
    "\276\001\002\000\004\013\277\001\002\000\046\003\051" +
    "\017\027\020\026\034\043\035\uffb7\036\030\040\056\042" +
    "\045\043\041\045\066\046\035\047\064\050\053\051\050" +
    "\053\065\054\024\060\023\061\033\001\002\000\050\003" +
    "\051\014\301\017\027\020\026\034\043\035\uffb7\036\030" +
    "\040\056\042\045\043\041\045\066\046\035\047\064\050" +
    "\053\051\050\053\065\054\024\060\023\061\033\001\002" +
    "\000\050\003\uffe2\014\uffe2\017\uffe2\020\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\060\uffe2\061" +
    "\uffe2\001\002\000\004\002\000\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\046\067\305\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\132\105\131\106\114\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\004\013\306\001" +
    "\002\000\046\003\051\017\027\020\026\034\043\035\uffb7" +
    "\036\030\040\056\042\045\043\041\045\066\046\035\047" +
    "\064\050\053\051\050\053\065\054\024\060\023\061\033" +
    "\001\002\000\050\003\051\014\310\017\027\020\026\034" +
    "\043\035\uffb7\036\030\040\056\042\045\043\041\045\066" +
    "\046\035\047\064\050\053\051\050\053\065\054\024\060" +
    "\023\061\033\001\002\000\052\003\uffc8\014\uffc8\017\uffc8" +
    "\020\uffc8\034\uffc8\035\uffc8\036\uffc8\037\312\040\uffc8\042" +
    "\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\053\uffc8\054\uffc8\060\uffc8\061\uffc8\001\002\000\052\003" +
    "\uffc6\014\uffc6\017\uffc6\020\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\325\040\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\006\013\314\036\313\001\002\000\004\066" +
    "\317\001\002\000\046\003\051\017\027\020\026\034\043" +
    "\035\uffb7\036\030\040\056\042\045\043\041\045\066\046" +
    "\035\047\064\050\053\051\050\053\065\054\024\060\023" +
    "\061\033\001\002\000\050\003\051\014\316\017\027\020" +
    "\026\034\043\035\uffb7\036\030\040\056\042\045\043\041" +
    "\045\066\046\035\047\064\050\053\051\050\053\065\054" +
    "\024\060\023\061\033\001\002\000\050\003\uffc7\014\uffc7" +
    "\017\uffc7\020\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\042" +
    "\uffc7\043\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\053\uffc7\054\uffc7\060\uffc7\061\uffc7\001\002\000\026\011" +
    "\105\012\077\020\106\024\110\026\103\032\076\033\101" +
    "\066\100\107\104\111\107\001\002\000\046\067\321\073" +
    "\127\074\117\075\122\076\120\077\123\100\112\102\113" +
    "\103\124\104\132\105\131\106\114\110\116\111\130\112" +
    "\121\113\126\114\125\115\115\001\002\000\004\013\322" +
    "\001\002\000\046\003\051\017\027\020\026\034\043\035" +
    "\uffb7\036\030\040\056\042\045\043\041\045\066\046\035" +
    "\047\064\050\053\051\050\053\065\054\024\060\023\061" +
    "\033\001\002\000\050\003\051\014\324\017\027\020\026" +
    "\034\043\035\uffb7\036\030\040\056\042\045\043\041\045" +
    "\066\046\035\047\064\050\053\051\050\053\065\054\024" +
    "\060\023\061\033\001\002\000\052\003\uffc3\014\uffc3\017" +
    "\uffc3\020\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\060\uffc3\061\uffc3\001\002\000\006" +
    "\013\327\036\326\001\002\000\004\066\332\001\002\000" +
    "\046\003\051\017\027\020\026\034\043\035\uffb7\036\030" +
    "\040\056\042\045\043\041\045\066\046\035\047\064\050" +
    "\053\051\050\053\065\054\024\060\023\061\033\001\002" +
    "\000\050\003\051\014\331\017\027\020\026\034\043\035" +
    "\uffb7\036\030\040\056\042\045\043\041\045\066\046\035" +
    "\047\064\050\053\051\050\053\065\054\024\060\023\061" +
    "\033\001\002\000\050\003\uffc5\014\uffc5\017\uffc5\020\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\040\uffc5\042\uffc5\043\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5" +
    "\060\uffc5\061\uffc5\001\002\000\026\011\105\012\077\020" +
    "\106\024\110\026\103\032\076\033\101\066\100\107\104" +
    "\111\107\001\002\000\046\067\334\073\127\074\117\075" +
    "\122\076\120\077\123\100\112\102\113\103\124\104\132" +
    "\105\131\106\114\110\116\111\130\112\121\113\126\114" +
    "\125\115\115\001\002\000\004\013\335\001\002\000\046" +
    "\003\051\017\027\020\026\034\043\035\uffb7\036\030\040" +
    "\056\042\045\043\041\045\066\046\035\047\064\050\053" +
    "\051\050\053\065\054\024\060\023\061\033\001\002\000" +
    "\050\003\051\014\337\017\027\020\026\034\043\035\uffb7" +
    "\036\030\040\056\042\045\043\041\045\066\046\035\047" +
    "\064\050\053\051\050\053\065\054\024\060\023\061\033" +
    "\001\002\000\052\003\uffc4\014\uffc4\017\uffc4\020\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\026\011\105\012\077" +
    "\020\106\024\110\026\103\032\076\033\101\066\100\107" +
    "\104\111\107\001\002\000\046\067\342\073\127\074\117" +
    "\075\122\076\120\077\123\100\112\102\113\103\124\104" +
    "\132\105\131\106\114\110\116\111\130\112\121\113\126" +
    "\114\125\115\115\001\002\000\050\003\uffe1\014\uffe1\017" +
    "\uffe1\020\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\042\uffe1" +
    "\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053" +
    "\uffe1\054\uffe1\060\uffe1\061\uffe1\001\002\000\006\064\352" +
    "\072\351\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\026\011\105\012\077\020\106\024\110\026" +
    "\103\032\076\033\101\066\100\107\104\111\107\001\002" +
    "\000\112\003\uffe4\014\uffe4\017\uffe4\020\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\040\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\060\uffe4\061" +
    "\uffe4\073\127\074\117\075\122\076\120\077\123\100\112" +
    "\102\113\103\124\104\132\105\131\106\114\110\116\111" +
    "\130\112\121\113\126\114\125\115\115\001\002\000\046" +
    "\065\350\073\127\074\117\075\122\076\120\077\123\100" +
    "\112\102\113\103\124\104\132\105\131\106\114\110\116" +
    "\111\130\112\121\113\126\114\125\115\115\001\002\000" +
    "\054\003\uffd6\014\uffd6\017\uffd6\020\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\040\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\060\uffd6\061\uffd6" +
    "\064\uffd6\072\uffd6\001\002\000\026\011\105\012\077\020" +
    "\106\024\110\026\103\032\076\033\101\066\100\107\104" +
    "\111\107\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\046\065\354\073\127\074\117\075\122\076" +
    "\120\077\123\100\112\102\113\103\124\104\132\105\131" +
    "\106\114\110\116\111\130\112\121\113\126\114\125\115" +
    "\115\001\002\000\054\003\uffd7\014\uffd7\017\uffd7\020\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7" +
    "\060\uffd7\061\uffd7\064\uffd7\072\uffd7\001\002\000\112\003" +
    "\uffd8\014\uffd8\017\uffd8\020\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\054\uffd8\060\uffd8\061\uffd8\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\132\105\131\106\114\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\004\020\357\001" +
    "\002\000\004\063\360\001\002\000\004\055\361\001\002" +
    "\000\004\067\362\001\002\000\050\003\uffb3\014\uffb3\017" +
    "\uffb3\020\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\042\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\054\uffb3\060\uffb3\061\uffb3\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\046\067\365\073\127" +
    "\074\117\075\122\076\120\077\123\100\112\102\113\103" +
    "\124\104\132\105\131\106\114\110\116\111\130\112\121" +
    "\113\126\114\125\115\115\001\002\000\050\003\uffb0\014" +
    "\uffb0\017\uffb0\020\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0" +
    "\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\053\uffb0\054\uffb0\060\uffb0\061\uffb0\001\002\000\014" +
    "\023\177\025\175\027\174\030\172\031\176\001\002\000" +
    "\006\020\073\062\371\001\002\000\054\003\uffe0\014\uffe0" +
    "\017\uffe0\020\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042" +
    "\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\053\uffe0\054\uffe0\060\uffe0\061\uffe0\063\201\072\202\001" +
    "\002\000\004\020\372\001\002\000\052\003\uffda\014\uffda" +
    "\017\uffda\020\uffda\034\uffda\035\uffda\036\uffda\040\uffda\042" +
    "\uffda\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\060\uffda\061\uffda\064\344\001\002\000" +
    "\054\003\uffdb\014\uffdb\017\uffdb\020\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\060\uffdb\061\uffdb" +
    "\064\352\072\374\001\002\000\004\070\375\001\002\000" +
    "\030\011\105\012\077\020\106\024\110\026\103\032\076" +
    "\033\101\066\100\070\375\107\104\111\107\001\002\000" +
    "\052\003\uffd9\014\uffd9\017\uffd9\020\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\040\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\060\uffd9\061\uffd9" +
    "\063\377\001\002\000\004\070\u0100\001\002\000\030\011" +
    "\105\012\077\020\106\024\110\026\103\032\076\033\101" +
    "\066\100\070\375\107\104\111\107\001\002\000\004\071" +
    "\u0107\001\002\000\006\063\u0105\071\uffd2\001\002\000\050" +
    "\063\uffd0\071\uffd0\073\127\074\117\075\122\076\120\077" +
    "\123\100\112\102\113\103\124\104\132\105\131\106\114" +
    "\110\116\111\130\112\121\113\126\114\125\115\115\001" +
    "\002\000\006\063\377\071\uffd3\001\002\000\026\011\105" +
    "\012\077\020\106\024\110\026\103\032\076\033\101\066" +
    "\100\107\104\111\107\001\002\000\050\063\uffd1\071\uffd1" +
    "\073\127\074\117\075\122\076\120\077\123\100\112\102" +
    "\113\103\124\104\132\105\131\106\114\110\116\111\130" +
    "\112\121\113\126\114\125\115\115\001\002\000\054\003" +
    "\uffd5\014\uffd5\017\uffd5\020\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\040\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\053\uffd5\054\uffd5\060\uffd5\061\uffd5\063\uffd5" +
    "\071\uffd5\001\002\000\004\071\u0109\001\002\000\054\003" +
    "\uffd4\014\uffd4\017\uffd4\020\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\053\uffd4\054\uffd4\060\uffd4\061\uffd4\063\uffd4" +
    "\071\uffd4\001\002\000\026\011\105\012\077\020\106\024" +
    "\110\026\103\032\076\033\101\066\100\107\104\111\107" +
    "\001\002\000\114\003\uffde\004\uffde\014\uffde\017\uffde\020" +
    "\uffde\034\uffde\035\uffde\036\uffde\040\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054" +
    "\uffde\060\uffde\061\uffde\073\127\074\117\075\122\076\120" +
    "\077\123\100\112\102\113\103\124\104\132\105\131\106" +
    "\114\110\116\111\130\112\121\113\126\114\125\115\115" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\006\002\003\040\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\030" +
    "\007\017\010\043\011\021\012\053\013\051\014\031\015" +
    "\045\016\046\017\041\020\061\021\033\022\016\023\060" +
    "\024\057\025\037\026\015\027\036\030\024\031\062\032" +
    "\056\033\035\034\054\035\066\044\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\007\017\010\162\011\021" +
    "\012\053\013\051\014\031\015\045\016\046\017\041\020" +
    "\061\021\033\022\016\023\060\024\057\025\037\026\015" +
    "\027\036\030\024\031\062\032\056\033\035\034\054\035" +
    "\066\044\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\017\015\070\016\073\044\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\152\001\001" +
    "\000\004\037\151\001\001\000\004\037\150\001\001\000" +
    "\004\037\147\001\001\000\004\037\146\001\001\000\004" +
    "\037\145\001\001\000\004\037\144\001\001\000\004\037" +
    "\143\001\001\000\004\037\142\001\001\000\004\037\141" +
    "\001\001\000\004\037\140\001\001\000\004\037\137\001" +
    "\001\000\004\037\136\001\001\000\004\037\135\001\001" +
    "\000\004\037\134\001\001\000\004\037\133\001\001\000" +
    "\004\037\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\161\007\017\010\043\011" +
    "\021\012\053\013\051\014\031\015\045\016\046\017\041" +
    "\020\061\021\033\022\016\023\060\024\057\025\037\026" +
    "\015\027\036\030\024\031\062\032\056\033\035\034\054" +
    "\035\066\044\020\001\001\000\062\007\017\010\162\011" +
    "\021\012\053\013\051\014\031\015\045\016\046\017\041" +
    "\020\061\021\033\022\016\023\060\024\057\025\037\026" +
    "\015\027\036\030\024\031\062\032\056\033\035\034\054" +
    "\035\066\044\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\172\001\001\000\002\001" +
    "\001\000\004\007\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\205\001\001\000" +
    "\002\001\001\000\004\013\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\212\007\017\010\043\011" +
    "\021\012\053\013\051\014\031\015\045\016\046\017\041" +
    "\020\061\021\033\022\016\023\060\024\057\025\037\026" +
    "\015\027\036\030\024\031\062\032\056\033\035\034\054" +
    "\035\066\044\020\001\001\000\062\007\017\010\162\011" +
    "\021\012\053\013\051\014\031\015\045\016\046\017\041" +
    "\020\061\021\033\022\016\023\060\024\057\025\037\026" +
    "\015\027\036\030\024\031\062\032\056\033\035\034\054" +
    "\035\066\044\020\001\001\000\002\001\001\000\004\037" +
    "\215\001\001\000\002\001\001\000\004\037\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\222\007" +
    "\017\010\043\011\021\012\053\013\051\014\031\015\045" +
    "\016\046\017\041\020\061\021\033\022\016\023\060\024" +
    "\057\025\037\026\015\027\036\030\024\031\062\032\056" +
    "\033\035\034\054\035\066\044\020\001\001\000\062\007" +
    "\017\010\162\011\021\012\053\013\051\014\031\015\045" +
    "\016\046\017\041\020\061\021\033\022\016\023\060\024" +
    "\057\025\037\026\015\027\036\030\024\031\062\032\056" +
    "\033\035\034\054\035\066\044\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\234\001\001" +
    "\000\002\001\001\000\004\037\236\001\001\000\002\001" +
    "\001\000\064\003\240\007\017\010\043\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\062\007\017\010\162\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\244\001\001\000\002\001\001\000\064\003\246\007" +
    "\017\010\043\011\021\012\053\013\051\014\031\015\045" +
    "\016\046\017\041\020\061\021\033\022\016\023\060\024" +
    "\057\025\037\026\015\027\036\030\024\031\062\032\056" +
    "\033\035\034\054\035\066\044\020\001\001\000\062\007" +
    "\017\010\162\011\021\012\053\013\051\014\031\015\045" +
    "\016\046\017\041\020\061\021\033\022\016\023\060\024" +
    "\057\025\037\026\015\027\036\030\024\031\062\032\056" +
    "\033\035\034\054\035\066\044\020\001\001\000\002\001" +
    "\001\000\064\003\251\007\017\010\043\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\062\007\017\010\162\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\260\001\001\000\002\001\001\000\004\037\262\001\001" +
    "\000\002\001\001\000\004\037\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\272\007\017\010" +
    "\043\011\021\012\053\013\051\014\031\015\045\016\046" +
    "\017\041\020\061\021\033\022\016\023\060\024\057\025" +
    "\037\026\015\027\036\030\024\031\062\032\056\033\035" +
    "\034\054\035\066\044\020\001\001\000\062\007\017\010" +
    "\162\011\021\012\053\013\051\014\031\015\045\016\046" +
    "\017\041\020\061\021\033\022\016\023\060\024\057\025" +
    "\037\026\015\027\036\030\024\031\062\032\056\033\035" +
    "\034\054\035\066\044\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\277\007\017" +
    "\010\043\011\021\012\053\013\051\014\031\015\045\016" +
    "\046\017\041\020\061\021\033\022\016\023\060\024\057" +
    "\025\037\026\015\027\036\030\024\031\062\032\056\033" +
    "\035\034\054\035\066\044\020\001\001\000\062\007\017" +
    "\010\162\011\021\012\053\013\051\014\031\015\045\016" +
    "\046\017\041\020\061\021\033\022\016\023\060\024\057" +
    "\025\037\026\015\027\036\030\024\031\062\032\056\033" +
    "\035\034\054\035\066\044\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\306\007\017\010\043" +
    "\011\021\012\053\013\051\014\031\015\045\016\046\017" +
    "\041\020\061\021\033\022\016\023\060\024\057\025\037" +
    "\026\015\027\036\030\024\031\062\032\056\033\035\034" +
    "\054\035\066\044\020\001\001\000\062\007\017\010\162" +
    "\011\021\012\053\013\051\014\031\015\045\016\046\017" +
    "\041\020\061\021\033\022\016\023\060\024\057\025\037" +
    "\026\015\027\036\030\024\031\062\032\056\033\035\034" +
    "\054\035\066\044\020\001\001\000\004\004\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\314\007\017\010\043\011\021\012\053\013\051" +
    "\014\031\015\045\016\046\017\041\020\061\021\033\022" +
    "\016\023\060\024\057\025\037\026\015\027\036\030\024" +
    "\031\062\032\056\033\035\034\054\035\066\044\020\001" +
    "\001\000\062\007\017\010\162\011\021\012\053\013\051" +
    "\014\031\015\045\016\046\017\041\020\061\021\033\022" +
    "\016\023\060\024\057\025\037\026\015\027\036\030\024" +
    "\031\062\032\056\033\035\034\054\035\066\044\020\001" +
    "\001\000\002\001\001\000\004\037\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\322\007\017\010" +
    "\043\011\021\012\053\013\051\014\031\015\045\016\046" +
    "\017\041\020\061\021\033\022\016\023\060\024\057\025" +
    "\037\026\015\027\036\030\024\031\062\032\056\033\035" +
    "\034\054\035\066\044\020\001\001\000\062\007\017\010" +
    "\162\011\021\012\053\013\051\014\031\015\045\016\046" +
    "\017\041\020\061\021\033\022\016\023\060\024\057\025" +
    "\037\026\015\027\036\030\024\031\062\032\056\033\035" +
    "\034\054\035\066\044\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\327\007\017" +
    "\010\043\011\021\012\053\013\051\014\031\015\045\016" +
    "\046\017\041\020\061\021\033\022\016\023\060\024\057" +
    "\025\037\026\015\027\036\030\024\031\062\032\056\033" +
    "\035\034\054\035\066\044\020\001\001\000\062\007\017" +
    "\010\162\011\021\012\053\013\051\014\031\015\045\016" +
    "\046\017\041\020\061\021\033\022\016\023\060\024\057" +
    "\025\037\026\015\027\036\030\024\031\062\032\056\033" +
    "\035\034\054\035\066\044\020\001\001\000\002\001\001" +
    "\000\004\037\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\335\007\017\010\043\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\062\007\017\010\162\011\021\012\053" +
    "\013\051\014\031\015\045\016\046\017\041\020\061\021" +
    "\033\022\016\023\060\024\057\025\037\026\015\027\036" +
    "\030\024\031\062\032\056\033\035\034\054\035\066\044" +
    "\020\001\001\000\002\001\001\000\004\037\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\346\001\001\000\004\037\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\354\001\001\000\004\037\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\366\001\001\000\004\007\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\372\001\001\000\002\001\001\000\004\043\375\001\001" +
    "\000\012\037\u0102\043\u0103\046\u0107\047\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\u0102\043\u0103" +
    "\046\u0100\047\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u010a\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Instruccion> AST;
    ArrayList<String> listVAR = new ArrayList<String>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= pistas INDENT_A instrucciones INDENT_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.AST=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pistas ::= PISTA NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pistas ::= PISTA NOMBRE EXTIENDE parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= parametros COMA NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= principal 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion_variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion_variables2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion_variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= arreglos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion_arreglo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= mensaje 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= para1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= para2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= continuar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= retorna 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= hacer_mientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= reproducir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= esperar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= ordenar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= salir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= incremental 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= NOMBRE SUMA_SIMPLIFICADA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SumaSimplificada(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		 System.err.println("error :( ..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // principal ::= PRINCIPAL PARENTESIS_ABRE PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Principal(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // imprimir ::= IMPRIMIR PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Imprimir(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_variables ::= keep VAR tipo_variable vars_id 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo b = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Declaracion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_variables2 ::= keep VAR tipo_variable vars_id IGUAL expresion 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo b = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Declaracion(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_variables ::= vars_id IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Asignacion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vars_id ::= vars_id COMA NOMBRE 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l; RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vars_id ::= NOMBRE 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars_id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE lista_Dimension 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglos ::= keep VAR tipo_variable ARREGLO NOMBRE lista_Dimension IGUAL lista_expresiones2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_arreglo ::= NOMBRE lista_Dimension IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_Dimension ::= lista_Dimension CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=Integer.parseInt(lst.toString())+1;  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_Dimension",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_Dimension ::= CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 RESULT=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_Dimension",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_expresiones2 ::= lista_expresiones2 COMA LLAVE_ABRE valores LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_expresiones2 ::= LLAVE_ABRE valores LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valores ::= lista_expresiones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valores ::= sub_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sub_expresion ::= sub_expresion COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sub_expresion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_variable ::= CADENA 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.CADENA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_variable ::= ENTERO 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.NUMERO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_variable ::= DECIMAL 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.DECIMAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_variable ::= CHAR 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.CARACTER;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_variable ::= BOOLEAN 
            {
              Simbolo.Tipo RESULT =null;
		 RESULT=Tipo.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // incremental ::= NOMBRE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Incremento(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremental",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // incremental ::= NOMBRE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Decremento(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremental",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C SINO INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C sino_si 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new If(a,b,c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // si ::= SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C sino_si SINO INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,l,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sino_si ::= sino_si SINO SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= l; RESULT.add(new If(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sino_si ::= SINO SI PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new If(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch ::= SWITCH PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A lista_casos DEFAULT INDENT_A instrucciones INDENT_C INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Switch(a, null, b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_casos ::= lista_casos CASO expresion INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= l; RESULT.add(new Case(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_casos ::= CASO expresion INDENT_A instrucciones INDENT_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new Case(a,b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // para1 ::= PARA PARENTESIS_ABRE declaracion_variables2 PTCOMA expresion PTCOMA incremental PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Para1(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // para2 ::= PARA PARENTESIS_ABRE asignacion_variables PTCOMA expresion PTCOMA incremental PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Para1(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // hacer_mientras ::= HACER INDENT_A instrucciones INDENT_C MIENTRAS PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion condicion = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Hacer_Mientras(condicion,ins,insleft+"",insright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer_mientras",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mientras ::= MIENTRAS PARENTESIS_ABRE expresion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Mientras(a,b,ssleft+"",ssright+"");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // continuar ::= CONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Continue(aleft+"",aright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // salir ::= SALIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Salir(aleft+"",aright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // retorna ::= RETORNA expresion 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Retorna(a,rleft+"",rright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorna",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // keep ::= KEEP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keep",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // keep ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keep",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // reproducir ::= REPRODUCIR PARENTESIS_ABRE NOTAS_MUSICALES COMA expresion COMA expresion COMA expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int octavaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int octavaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operacion octava = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion tiempo = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion canal = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Reproducir(nota,octava,tiempo, canal,aleft+"",aright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // esperar ::= ESPERAR PARENTESIS_ABRE expresion COMA expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion tiempo = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion canal = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Esperar(tiempo, canal,aleft+"",aright+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // metodos_retorno ::= sumarizar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_retorno",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ordenar ::= ORDENAR PARENTESIS_ABRE NOMBRE COMA TIPOS_ORDENAMIENTO PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sumarizar ::= SUMARIZAR PARENTESIS_ABRE NOMBRE PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sumarizar ::= SUMARIZAR PARENTESIS_ABRE lista_expresiones2 PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mensaje ::= MENSAJE PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Mensaje(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funcion ::= keep tipo_variable NOMBRE PARENTESIS_ABRE parametros_funcion PARENTESIS_CIERRA INDENT_A instrucciones INDENT_C 
            {
              Instruccion RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> param = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Funcion(tipo,id,param,ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_funcion ::= parametros_funcion COMA tipo_variable NOMBRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l; RESULT.add(new Parametros(tipo,id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_funcion ::= tipo_variable NOMBRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add(new Parametros(tipo,id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion SUMA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion RESTA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion DIVISION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion POTENCIA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion MODULO expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion IGUALACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUALACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENCIACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion MAYORQUE expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion MENORQUE expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion MENORIGUAL expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion OR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion NOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion XOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion AND expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion NAND expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NAND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= RESTA expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= NOT expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= ENTEROO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Integer(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= DECIMALL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= TRUE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Boolean(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= FALSE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Boolean(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= NOMBRE 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= CADENAA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a.substring(1, a.length() - 1),Operacion.Tipo_operacion.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= CHARR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a.substring(1, a.length() - 1),Operacion.Tipo_operacion.CARACTER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
