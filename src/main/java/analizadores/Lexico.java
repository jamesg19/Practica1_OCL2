// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexico.jflex

package analizadores;
import static analizadores.sym.*;
import java_cup.runtime.Symbol; 
//COMANDOS
// java -jar jflex-full-1.8.2.jar lexico.jflex
// java -jar java-cup-11b.jar sintactico.cup


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT_MULTILINEA = 2;
  public static final int COMMENT_LINE = 4;
  public static final int SALTO_LINEA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\12\23\1\7\1\24\1\25"+
    "\1\26\1\27\2\7\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\50\1\60\1\61\1\62\1\63"+
    "\1\64\1\7\1\0\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\50\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\50\1\114\1\115\1\116\1\117"+
    "\101\0\30\7\1\0\37\7\1\0\10\7\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\22\22\1\23\1\24\1\25"+
    "\21\22\1\26\1\1\1\27\2\3\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\2\0\1\35\1\0\1\36\1\37"+
    "\2\0\1\40\1\41\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\55\22\1\50\3\22\1\50\10\22\4\51"+
    "\1\22\1\51\1\22\1\52\1\30\2\0\1\53\1\54"+
    "\1\35\2\55\1\56\75\22\1\57\2\22\1\51\10\22"+
    "\1\60\26\22\1\61\10\22\1\62\16\22\1\63\5\22"+
    "\1\64\17\22\1\65\7\22\1\66\1\67\14\22\1\70"+
    "\1\71\7\22\1\72\14\22\1\73\6\22\1\74\26\22"+
    "\1\75\3\22\1\76\2\22\1\77\4\22\1\100\1\101"+
    "\6\22\1\102\2\22\1\103\4\22\1\104\7\22\1\105"+
    "\2\22\1\106\1\107\1\110\1\111\1\22\1\112\11\22"+
    "\1\113\1\114\2\22\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u0140\0\u02d0\0\u0320\0\u0140\0\u0140\0\u0140\0\u0370"+
    "\0\u0140\0\u03c0\0\u0140\0\u0410\0\u0140\0\u0460\0\u04b0\0\u0500"+
    "\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780"+
    "\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00"+
    "\0\u0a50\0\u0aa0\0\u0140\0\u0140\0\u0140\0\u0af0\0\u0b40\0\u0b90"+
    "\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10"+
    "\0\u0e60\0\u0eb0\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u0140\0\u1040"+
    "\0\u0140\0\u0140\0\u1090\0\u10e0\0\u0140\0\u1130\0\u0140\0\u1180"+
    "\0\u0140\0\u11d0\0\u0280\0\u0140\0\u1220\0\u0140\0\u0140\0\u1270"+
    "\0\u12c0\0\u0140\0\u0140\0\u0140\0\u1310\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0"+
    "\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770"+
    "\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70"+
    "\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0"+
    "\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670"+
    "\0\u26c0\0\u2710\0\u2760\0\u0140\0\u0140\0\u27b0\0\u2800\0\u0140"+
    "\0\u0140\0\u0280\0\u0140\0\u1270\0\u1310\0\u2850\0\u28a0\0\u28f0"+
    "\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70"+
    "\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0"+
    "\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020\0\u3070"+
    "\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0"+
    "\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570"+
    "\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u37a0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u0730\0\u3b60\0\u3bb0\0\u0140\0\u3c00\0\u3c50"+
    "\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u0730\0\u3e80"+
    "\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100"+
    "\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380"+
    "\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u4510\0\u0730\0\u4560\0\u45b0"+
    "\0\u4600\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u0730\0\u47e0"+
    "\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60"+
    "\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0\0\u0730\0\u4c40\0\u4c90"+
    "\0\u4ce0\0\u4d30\0\u4d80\0\u0730\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0"+
    "\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140"+
    "\0\u5190\0\u51e0\0\u5230\0\u0730\0\u5280\0\u52d0\0\u5320\0\u5370"+
    "\0\u53c0\0\u5410\0\u5460\0\u0730\0\u0730\0\u54b0\0\u5500\0\u5550"+
    "\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780\0\u57d0"+
    "\0\u5820\0\u0730\0\u0730\0\u5870\0\u58c0\0\u5910\0\u5960\0\u59b0"+
    "\0\u5a00\0\u5a50\0\u0730\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u0730"+
    "\0\u5e60\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u0730\0\u6040"+
    "\0\u6090\0\u60e0\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0"+
    "\0\u6310\0\u6360\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0\0\u6540"+
    "\0\u6590\0\u65e0\0\u6630\0\u6680\0\u66d0\0\u0730\0\u6720\0\u6770"+
    "\0\u67c0\0\u0730\0\u6810\0\u6860\0\u0730\0\u68b0\0\u6900\0\u6950"+
    "\0\u69a0\0\u0730\0\u0730\0\u69f0\0\u6a40\0\u6a90\0\u6ae0\0\u6b30"+
    "\0\u6b80\0\u0730\0\u6bd0\0\u6c20\0\u0730\0\u6c70\0\u6cc0\0\u6d10"+
    "\0\u6d60\0\u0730\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u6ef0\0\u6f40"+
    "\0\u6f90\0\u0730\0\u6fe0\0\u7030\0\u0730\0\u0730\0\u0730\0\u0730"+
    "\0\u7080\0\u0730\0\u70d0\0\u7120\0\u7170\0\u71c0\0\u7210\0\u7260"+
    "\0\u72b0\0\u7300\0\u7350\0\u0730\0\u0730\0\u73a0\0\u73f0\0\u0730"+
    "\0\u0730";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\7\1\10\1\11\2\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\5"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\37"+
    "\1\42\1\43\1\44\1\37\1\45\1\46\1\37\1\47"+
    "\1\50\1\51\1\37\1\52\3\37\1\53\1\5\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\37"+
    "\1\64\1\65\1\37\1\66\1\67\1\70\1\37\1\71"+
    "\1\72\1\73\1\74\1\75\1\37\1\76\3\37\1\77"+
    "\1\100\1\101\20\102\1\103\101\102\1\104\115\102\1\105"+
    "\1\106\16\105\1\5\4\105\1\5\1\105\1\5\70\105"+
    "\122\0\1\6\120\0\1\7\120\0\1\107\4\0\1\110"+
    "\14\0\1\111\67\0\1\112\4\0\2\113\1\114\1\115"+
    "\3\113\1\0\46\113\3\0\34\113\11\0\1\116\104\0"+
    "\1\117\4\0\2\120\1\0\1\121\3\120\1\0\46\120"+
    "\3\0\34\120\16\0\1\122\7\0\1\123\111\0\1\124"+
    "\120\0\1\125\1\0\1\24\4\0\31\37\4\0\30\37"+
    "\23\0\1\126\5\0\1\127\117\0\1\130\117\0\1\131"+
    "\1\132\113\0\1\37\4\0\21\37\1\133\1\134\6\37"+
    "\4\0\20\37\1\135\1\136\6\37\26\0\1\37\4\0"+
    "\16\37\1\137\12\37\4\0\16\37\1\140\11\37\26\0"+
    "\1\37\4\0\1\141\15\37\1\142\12\37\4\0\1\143"+
    "\15\37\1\144\11\37\26\0\1\37\4\0\4\37\1\145"+
    "\11\37\1\146\12\37\4\0\4\37\1\147\11\37\1\150"+
    "\11\37\26\0\1\37\4\0\15\37\1\151\4\37\1\152"+
    "\4\37\1\153\1\37\4\0\15\37\1\154\3\37\1\155"+
    "\4\37\1\156\1\37\26\0\1\37\4\0\1\157\30\37"+
    "\4\0\1\160\27\37\26\0\1\37\4\0\31\37\4\0"+
    "\30\37\26\0\1\37\4\0\1\161\30\37\4\0\1\162"+
    "\27\37\26\0\1\37\4\0\14\37\1\163\14\37\4\0"+
    "\14\37\1\164\13\37\26\0\1\37\4\0\4\37\1\165"+
    "\24\37\4\0\4\37\1\166\23\37\26\0\1\37\4\0"+
    "\16\37\1\167\12\37\4\0\16\37\1\170\11\37\26\0"+
    "\1\37\4\0\4\37\1\171\3\37\1\172\20\37\4\0"+
    "\4\37\1\173\3\37\1\174\17\37\26\0\1\37\4\0"+
    "\21\37\1\175\7\37\4\0\20\37\1\176\7\37\26\0"+
    "\1\37\4\0\1\177\7\37\1\200\10\37\1\201\7\37"+
    "\4\0\1\202\7\37\1\203\7\37\1\204\7\37\26\0"+
    "\1\37\4\0\4\37\1\205\24\37\4\0\4\37\1\206"+
    "\23\37\26\0\1\37\4\0\1\207\7\37\1\210\13\37"+
    "\1\211\1\37\1\212\2\37\4\0\1\213\7\37\1\214"+
    "\12\37\1\215\1\37\1\216\2\37\26\0\1\37\4\0"+
    "\21\37\1\217\7\37\4\0\20\37\1\220\7\37\26\0"+
    "\1\37\4\0\1\221\3\37\1\222\24\37\4\0\1\223"+
    "\3\37\1\224\23\37\26\0\1\37\4\0\31\37\4\0"+
    "\20\37\1\135\1\136\6\37\26\0\1\37\4\0\31\37"+
    "\4\0\16\37\1\140\11\37\26\0\1\37\4\0\31\37"+
    "\4\0\1\143\15\37\1\144\11\37\26\0\1\37\4\0"+
    "\31\37\4\0\4\37\1\147\11\37\1\225\11\37\26\0"+
    "\1\37\4\0\31\37\4\0\15\37\1\154\3\37\1\155"+
    "\4\37\1\156\1\37\26\0\1\37\4\0\31\37\4\0"+
    "\1\226\27\37\26\0\1\37\4\0\31\37\4\0\1\162"+
    "\27\37\26\0\1\37\4\0\31\37\4\0\14\37\1\164"+
    "\13\37\26\0\1\37\4\0\31\37\4\0\4\37\1\166"+
    "\23\37\26\0\1\37\4\0\31\37\4\0\1\227\15\37"+
    "\1\170\11\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\173\3\37\1\230\17\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\176\7\37\26\0\1\37\4\0\21\37"+
    "\1\231\7\37\4\0\1\202\7\37\1\203\7\37\1\204"+
    "\7\37\26\0\1\37\4\0\31\37\4\0\4\37\1\232"+
    "\23\37\26\0\1\37\4\0\31\37\4\0\1\213\7\37"+
    "\1\214\5\37\1\233\4\37\1\215\1\37\1\216\2\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\220\7\37"+
    "\26\0\1\37\4\0\31\37\4\0\1\223\3\37\1\224"+
    "\23\37\121\0\1\234\30\0\1\235\72\0\1\104\116\0"+
    "\1\106\23\0\1\236\1\0\1\237\101\0\1\240\224\0"+
    "\1\241\4\0\2\113\1\242\1\115\52\113\1\0\1\113"+
    "\1\0\34\113\12\0\1\243\112\0\1\120\4\0\1\244"+
    "\47\0\1\120\17\0\1\120\2\0\1\120\1\0\1\120"+
    "\33\0\1\245\117\0\1\37\4\0\21\37\1\246\7\37"+
    "\4\0\30\37\26\0\1\37\4\0\2\37\1\247\26\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\20\37"+
    "\1\250\7\37\26\0\1\37\4\0\31\37\4\0\2\37"+
    "\1\251\25\37\26\0\1\37\4\0\16\37\1\252\12\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\16\37"+
    "\1\253\11\37\26\0\1\37\4\0\3\37\1\254\15\37"+
    "\1\255\1\256\6\37\4\0\30\37\26\0\1\37\4\0"+
    "\15\37\1\257\13\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\3\37\1\260\14\37\1\261\1\262\6\37"+
    "\26\0\1\37\4\0\31\37\4\0\15\37\1\263\12\37"+
    "\26\0\1\37\4\0\5\37\1\264\14\37\1\134\6\37"+
    "\4\0\30\37\26\0\1\37\4\0\1\37\1\265\27\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\5\37"+
    "\1\266\13\37\1\136\6\37\26\0\1\37\4\0\31\37"+
    "\4\0\1\37\1\267\26\37\26\0\1\37\4\0\23\37"+
    "\1\270\5\37\4\0\30\37\26\0\1\37\4\0\17\37"+
    "\1\271\11\37\4\0\30\37\26\0\1\37\4\0\23\37"+
    "\1\272\5\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\22\37\1\273\5\37\26\0\1\37\4\0\31\37"+
    "\4\0\17\37\1\274\10\37\26\0\1\37\4\0\31\37"+
    "\4\0\22\37\1\275\5\37\26\0\1\37\4\0\13\37"+
    "\1\276\15\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\13\37\1\277\14\37\26\0\1\37\4\0\2\37"+
    "\1\300\26\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\2\37\1\301\25\37\26\0\1\37\4\0\17\37"+
    "\1\302\11\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\17\37\1\303\10\37\26\0\1\37\4\0\4\37"+
    "\1\304\24\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\305\23\37\26\0\1\37\4\0\15\37"+
    "\1\306\13\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\15\37\1\307\12\37\26\0\1\37\4\0\15\37"+
    "\1\310\13\37\4\0\30\37\26\0\1\37\4\0\4\37"+
    "\1\311\24\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\15\37\1\312\12\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\313\23\37\26\0\1\37\4\0\3\37"+
    "\1\314\25\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\3\37\1\315\24\37\26\0\1\37\4\0\21\37"+
    "\1\316\7\37\4\0\30\37\26\0\1\37\4\0\22\37"+
    "\1\317\6\37\4\0\30\37\26\0\1\37\4\0\10\37"+
    "\1\320\5\37\1\321\12\37\4\0\16\37\1\321\11\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\322\7\37"+
    "\26\0\1\37\4\0\31\37\4\0\21\37\1\323\6\37"+
    "\26\0\1\37\4\0\16\37\1\321\12\37\4\0\10\37"+
    "\1\324\5\37\1\321\11\37\26\0\1\37\4\0\17\37"+
    "\1\325\3\37\1\326\5\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\17\37\1\327\2\37\1\330\5\37"+
    "\26\0\1\37\4\0\13\37\1\331\15\37\4\0\30\37"+
    "\26\0\1\37\4\0\15\37\1\332\13\37\4\0\30\37"+
    "\26\0\1\37\4\0\14\37\1\333\14\37\4\0\30\37"+
    "\26\0\1\37\4\0\10\37\1\334\20\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\13\37\1\335\14\37"+
    "\26\0\1\37\4\0\31\37\4\0\15\37\1\336\12\37"+
    "\26\0\1\37\4\0\31\37\4\0\14\37\1\337\13\37"+
    "\26\0\1\37\4\0\31\37\4\0\10\37\1\340\17\37"+
    "\26\0\1\37\4\0\24\37\1\341\4\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\23\37\1\342\4\37"+
    "\26\0\1\37\4\0\21\37\1\343\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\21\37\1\344\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\343\7\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\345\7\37"+
    "\11\0\1\346\14\0\1\37\4\0\31\37\4\0\1\37"+
    "\1\267\26\37\11\0\1\346\14\0\1\37\4\0\31\37"+
    "\4\0\13\37\1\277\14\37\11\0\1\346\14\0\1\37"+
    "\4\0\31\37\4\0\30\37\11\0\1\346\14\0\1\37"+
    "\4\0\31\37\4\0\4\37\1\313\23\37\26\0\1\37"+
    "\4\0\16\37\1\321\12\37\4\0\16\37\1\321\11\37"+
    "\11\0\1\346\14\0\1\37\4\0\31\37\4\0\17\37"+
    "\1\327\2\37\1\330\5\37\26\0\1\37\4\0\31\37"+
    "\4\0\13\37\1\227\14\37\23\0\1\126\126\0\1\132"+
    "\113\0\1\37\4\0\4\37\1\347\24\37\4\0\30\37"+
    "\26\0\1\37\4\0\4\37\1\350\24\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\4\37\1\351\23\37"+
    "\26\0\1\37\4\0\31\37\4\0\4\37\1\352\23\37"+
    "\26\0\1\37\4\0\13\37\1\353\15\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\13\37\1\354\14\37"+
    "\26\0\1\37\4\0\4\37\1\355\24\37\4\0\30\37"+
    "\26\0\1\37\4\0\1\356\30\37\4\0\30\37\26\0"+
    "\1\37\4\0\16\37\1\357\12\37\4\0\30\37\26\0"+
    "\1\37\4\0\23\37\1\360\5\37\4\0\30\37\26\0"+
    "\1\37\4\0\31\37\4\0\4\37\1\361\23\37\26\0"+
    "\1\37\4\0\31\37\4\0\1\362\27\37\26\0\1\37"+
    "\4\0\31\37\4\0\16\37\1\357\11\37\26\0\1\37"+
    "\4\0\31\37\4\0\22\37\1\363\5\37\26\0\1\37"+
    "\4\0\1\364\30\37\4\0\30\37\26\0\1\37\4\0"+
    "\13\37\1\365\15\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\366\27\37\26\0\1\37\4\0\31\37"+
    "\4\0\13\37\1\367\14\37\26\0\1\37\4\0\4\37"+
    "\1\370\24\37\4\0\30\37\26\0\1\37\4\0\4\37"+
    "\1\371\24\37\4\0\30\37\26\0\1\37\4\0\10\37"+
    "\1\372\20\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\373\23\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\374\23\37\26\0\1\37\4\0\31\37"+
    "\4\0\10\37\1\375\17\37\26\0\1\37\4\0\22\37"+
    "\1\376\6\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\21\37\1\377\6\37\26\0\1\37\4\0\4\37"+
    "\1\u0100\24\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\u0101\23\37\26\0\1\37\4\0\1\u0102"+
    "\20\37\1\u0103\7\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\u0104\17\37\1\u0105\7\37\26\0\1\37"+
    "\4\0\17\37\1\u0106\11\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\17\37\1\u0106\10\37\26\0\1\37"+
    "\4\0\6\37\1\u0107\22\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\6\37\1\u0108\21\37\26\0\1\37"+
    "\4\0\22\37\1\u0109\6\37\4\0\30\37\26\0\1\37"+
    "\4\0\15\37\1\u010a\13\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\21\37\1\u010b\6\37\26\0\1\37"+
    "\4\0\31\37\4\0\15\37\1\u010c\12\37\26\0\1\37"+
    "\4\0\4\37\1\u010d\24\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\4\37\1\u010e\23\37\26\0\1\37"+
    "\4\0\1\u010f\3\37\1\u0110\24\37\4\0\30\37\26\0"+
    "\1\37\4\0\23\37\1\u0111\5\37\4\0\30\37\26\0"+
    "\1\37\4\0\14\37\1\u0112\1\u0113\13\37\4\0\30\37"+
    "\26\0\1\37\4\0\6\37\1\u0114\22\37\4\0\6\37"+
    "\1\u0114\21\37\26\0\1\37\4\0\31\37\4\0\1\u010f"+
    "\3\37\1\u0115\23\37\26\0\1\37\4\0\31\37\4\0"+
    "\22\37\1\u0116\5\37\26\0\1\37\4\0\31\37\4\0"+
    "\14\37\1\u0117\1\u0118\12\37\26\0\1\37\4\0\21\37"+
    "\1\u0119\7\37\4\0\30\37\26\0\1\37\4\0\16\37"+
    "\1\u011a\12\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u011b\7\37\26\0\1\37\4\0\31\37"+
    "\4\0\16\37\1\u011c\11\37\26\0\1\37\4\0\10\37"+
    "\1\u011d\20\37\4\0\30\37\26\0\1\37\4\0\16\37"+
    "\1\u011e\12\37\4\0\30\37\26\0\1\37\4\0\1\u011f"+
    "\30\37\4\0\30\37\26\0\1\37\4\0\23\37\1\u0120"+
    "\5\37\4\0\30\37\26\0\1\37\4\0\31\37\4\0"+
    "\10\37\1\u0121\17\37\26\0\1\37\4\0\31\37\4\0"+
    "\16\37\1\u011e\11\37\26\0\1\37\4\0\31\37\4\0"+
    "\1\u0122\27\37\26\0\1\37\4\0\31\37\4\0\22\37"+
    "\1\u0123\5\37\26\0\1\37\4\0\4\37\1\u0124\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u0124\23\37\26\0\1\37\4\0\3\37\1\u0125\25\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\3\37"+
    "\1\u0126\24\37\26\0\1\37\4\0\6\37\1\u0127\22\37"+
    "\4\0\30\37\26\0\1\37\4\0\15\37\1\u0128\13\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\6\37"+
    "\1\u0129\21\37\26\0\1\37\4\0\31\37\4\0\15\37"+
    "\1\u012a\12\37\26\0\1\37\4\0\4\37\1\u012b\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u012c\23\37\26\0\1\37\4\0\15\37\1\u012d\13\37"+
    "\4\0\30\37\26\0\1\37\4\0\2\37\1\u012e\26\37"+
    "\4\0\30\37\26\0\1\37\4\0\10\37\1\u012f\20\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\15\37"+
    "\1\u0130\12\37\26\0\1\37\4\0\31\37\4\0\2\37"+
    "\1\u0131\25\37\26\0\1\37\4\0\31\37\4\0\10\37"+
    "\1\u0132\17\37\26\0\1\37\4\0\24\37\1\u0133\4\37"+
    "\4\0\30\37\26\0\1\37\4\0\4\37\1\u0134\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\23\37"+
    "\1\u0135\4\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u0134\23\37\26\0\1\37\4\0\21\37\1\u0136\7\37"+
    "\4\0\30\37\26\0\1\37\4\0\21\37\1\u0137\7\37"+
    "\4\0\30\37\26\0\1\37\4\0\4\37\1\u0138\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\20\37"+
    "\1\u0139\7\37\26\0\1\37\4\0\31\37\4\0\20\37"+
    "\1\u013a\7\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u013b\23\37\26\0\1\37\4\0\4\37\1\u013c\11\37"+
    "\1\u013c\12\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\u013c\11\37\1\u013c\11\37\26\0\1\37"+
    "\4\0\21\37\1\u013d\7\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\20\37\1\u013d\7\37\26\0\1\37"+
    "\4\0\21\37\1\u013e\7\37\4\0\30\37\26\0\1\37"+
    "\4\0\10\37\1\u013f\20\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\20\37\1\u0140\7\37\26\0\1\37"+
    "\4\0\31\37\4\0\10\37\1\u0141\17\37\26\0\1\37"+
    "\4\0\10\37\1\u0142\20\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\10\37\1\u0143\17\37\26\0\1\37"+
    "\4\0\1\u0144\30\37\4\0\30\37\26\0\1\37\4\0"+
    "\23\37\1\u0145\5\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\u0146\27\37\26\0\1\37\4\0\31\37"+
    "\4\0\22\37\1\u0147\5\37\26\0\1\37\4\0\15\37"+
    "\1\u0148\13\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\15\37\1\u0149\12\37\26\0\1\37\4\0\22\37"+
    "\1\u014a\6\37\4\0\30\37\26\0\1\37\4\0\1\u014b"+
    "\30\37\4\0\30\37\26\0\1\37\4\0\16\37\1\u0110"+
    "\12\37\4\0\30\37\26\0\1\37\4\0\2\37\1\u014c"+
    "\26\37\4\0\30\37\26\0\1\37\4\0\21\37\1\u014d"+
    "\7\37\4\0\20\37\1\u014d\7\37\26\0\1\37\4\0"+
    "\31\37\4\0\21\37\1\u014a\6\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\u014b\27\37\26\0\1\37\4\0\31\37"+
    "\4\0\16\37\1\u0115\11\37\26\0\1\37\4\0\31\37"+
    "\4\0\2\37\1\u014e\25\37\26\0\1\37\4\0\16\37"+
    "\1\u014f\12\37\4\0\30\37\26\0\1\37\4\0\21\37"+
    "\1\u0150\7\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\16\37\1\u0151\11\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u0152\7\37\26\0\1\37\4\0\21\37"+
    "\1\u0153\7\37\4\0\30\37\26\0\1\37\4\0\21\37"+
    "\1\u0154\7\37\4\0\30\37\26\0\1\37\4\0\2\37"+
    "\1\u0155\26\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u0153\7\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u0156\7\37\26\0\1\37\4\0\31\37"+
    "\4\0\2\37\1\u0157\25\37\26\0\1\37\4\0\1\u0158"+
    "\30\37\4\0\30\37\26\0\1\37\4\0\31\37\4\0"+
    "\1\u0159\27\37\26\0\1\37\4\0\13\37\1\u015a\15\37"+
    "\4\0\30\37\26\0\1\37\4\0\3\37\1\u015b\25\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\13\37"+
    "\1\u015c\14\37\26\0\1\37\4\0\31\37\4\0\3\37"+
    "\1\u015d\24\37\26\0\1\37\4\0\1\u015e\30\37\4\0"+
    "\30\37\26\0\1\37\4\0\31\37\4\0\1\u015f\27\37"+
    "\26\0\1\37\4\0\1\u0160\30\37\4\0\30\37\26\0"+
    "\1\37\4\0\23\37\1\u0161\5\37\4\0\30\37\26\0"+
    "\1\37\4\0\15\37\1\u0162\13\37\4\0\30\37\26\0"+
    "\1\37\4\0\31\37\4\0\1\u0160\27\37\26\0\1\37"+
    "\4\0\31\37\4\0\22\37\1\u0163\5\37\26\0\1\37"+
    "\4\0\31\37\4\0\15\37\1\u0164\12\37\26\0\1\37"+
    "\4\0\13\37\1\u0165\15\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\13\37\1\u0166\14\37\26\0\1\37"+
    "\4\0\16\37\1\u0167\12\37\4\0\30\37\26\0\1\37"+
    "\4\0\1\u0168\30\37\4\0\30\37\26\0\1\37\4\0"+
    "\15\37\1\u0169\13\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\16\37\1\u0167\11\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\u016a\27\37\26\0\1\37\4\0\31\37"+
    "\4\0\15\37\1\u016b\12\37\26\0\1\37\4\0\4\37"+
    "\1\u0110\24\37\4\0\30\37\26\0\1\37\4\0\14\37"+
    "\1\u016c\14\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\u0115\23\37\26\0\1\37\4\0\31\37"+
    "\4\0\14\37\1\u016d\13\37\26\0\1\37\4\0\23\37"+
    "\1\u016e\5\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\22\37\1\u016f\5\37\26\0\1\37\4\0\11\37"+
    "\1\u0170\17\37\4\0\30\37\26\0\1\37\4\0\21\37"+
    "\1\u0171\7\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\11\37\1\u0172\16\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u0173\7\37\26\0\1\37\4\0\1\u0174"+
    "\30\37\4\0\30\37\26\0\1\37\4\0\31\37\4\0"+
    "\1\u0175\27\37\26\0\1\37\4\0\10\37\1\u0176\20\37"+
    "\4\0\30\37\26\0\1\37\4\0\1\u0177\30\37\4\0"+
    "\1\u0177\27\37\26\0\1\37\4\0\31\37\4\0\10\37"+
    "\1\u0178\17\37\26\0\1\37\4\0\3\37\1\u0179\25\37"+
    "\4\0\30\37\26\0\1\37\4\0\15\37\1\u017a\13\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\3\37"+
    "\1\u017b\24\37\26\0\1\37\4\0\31\37\4\0\15\37"+
    "\1\u017c\12\37\26\0\1\37\4\0\10\37\1\u017d\20\37"+
    "\4\0\30\37\26\0\1\37\4\0\7\37\1\u017e\21\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\10\37"+
    "\1\u017f\17\37\26\0\1\37\4\0\31\37\4\0\7\37"+
    "\1\u017e\20\37\26\0\1\37\4\0\3\37\1\u0180\25\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\3\37"+
    "\1\u0181\24\37\26\0\1\37\4\0\16\37\1\u0182\12\37"+
    "\4\0\30\37\26\0\1\37\4\0\4\37\1\u0183\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\16\37"+
    "\1\u0182\11\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u0184\23\37\26\0\1\37\4\0\15\37\1\u0185\13\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\15\37"+
    "\1\u0185\12\37\26\0\1\37\4\0\4\37\1\u0186\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\24\37\1\u0187\4\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\4\37"+
    "\1\u0188\23\37\26\0\1\37\4\0\31\37\4\0\23\37"+
    "\1\u0189\4\37\26\0\1\37\4\0\23\37\1\u018a\5\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\22\37"+
    "\1\u018a\5\37\26\0\1\37\4\0\21\37\1\u018b\7\37"+
    "\4\0\30\37\26\0\1\37\4\0\3\37\1\u018c\25\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\20\37"+
    "\1\u018b\7\37\26\0\1\37\4\0\31\37\4\0\3\37"+
    "\1\u018d\24\37\26\0\1\37\4\0\10\37\1\u018e\20\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\10\37"+
    "\1\u018f\17\37\26\0\1\37\4\0\24\37\1\u0190\4\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\23\37"+
    "\1\u0191\4\37\26\0\1\37\4\0\4\37\1\u0192\24\37"+
    "\4\0\30\37\26\0\1\37\4\0\1\u0193\30\37\4\0"+
    "\30\37\26\0\1\37\4\0\31\37\4\0\4\37\1\u0192"+
    "\23\37\26\0\1\37\4\0\31\37\4\0\1\u0194\27\37"+
    "\26\0\1\37\4\0\21\37\1\u0195\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\u0195\7\37"+
    "\26\0\1\37\4\0\17\37\1\u0196\11\37\4\0\30\37"+
    "\26\0\1\37\4\0\14\37\1\u0197\14\37\4\0\14\37"+
    "\1\u0197\13\37\26\0\1\37\4\0\31\37\4\0\17\37"+
    "\1\u0198\10\37\26\0\1\37\4\0\24\37\1\u0199\4\37"+
    "\4\0\30\37\26\0\1\37\4\0\1\u019a\30\37\4\0"+
    "\30\37\26\0\1\37\4\0\31\37\4\0\23\37\1\u019b"+
    "\4\37\26\0\1\37\4\0\31\37\4\0\1\u019a\27\37"+
    "\26\0\1\37\4\0\30\37\1\u019c\4\0\30\37\26\0"+
    "\1\37\4\0\31\37\4\0\27\37\1\u019d\26\0\1\37"+
    "\4\0\4\37\1\u019e\24\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\4\37\1\u019f\23\37\26\0\1\37"+
    "\4\0\15\37\1\u01a0\13\37\4\0\30\37\26\0\1\37"+
    "\4\0\31\37\4\0\15\37\1\u01a1\12\37\26\0\1\37"+
    "\4\0\21\37\1\u01a2\7\37\4\0\30\37\26\0\1\37"+
    "\4\0\1\u01a3\30\37\4\0\30\37\26\0\1\37\4\0"+
    "\31\37\4\0\20\37\1\u01a2\7\37\26\0\1\37\4\0"+
    "\31\37\4\0\1\u01a4\27\37\26\0\1\37\4\0\4\37"+
    "\1\u01a5\24\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\4\37\1\u01a5\23\37\26\0\1\37\4\0\21\37"+
    "\1\u01a6\7\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\20\37\1\u01a6\7\37\26\0\1\37\4\0\3\37"+
    "\1\u01a7\25\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\3\37\1\u01a7\24\37\26\0\1\37\4\0\22\37"+
    "\1\u01a8\6\37\4\0\30\37\26\0\1\37\4\0\31\37"+
    "\4\0\21\37\1\u01a8\6\37\26\0\1\37\4\0\1\u01a9"+
    "\30\37\4\0\30\37\26\0\1\37\4\0\1\u01aa\30\37"+
    "\4\0\1\u01aa\27\37\26\0\1\37\4\0\31\37\4\0"+
    "\1\u01ab\27\37\26\0\1\37\4\0\2\37\1\u01ac\26\37"+
    "\4\0\30\37\26\0\1\37\4\0\31\37\4\0\2\37"+
    "\1\u01ad\25\37\26\0\1\37\4\0\1\u01ae\30\37\4\0"+
    "\30\37\26\0\1\37\4\0\31\37\4\0\1\u01af\27\37"+
    "\26\0\1\37\4\0\21\37\1\u01b0\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\u01b1\7\37"+
    "\26\0\1\37\4\0\23\37\1\u01b2\5\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\22\37\1\u01b3\5\37"+
    "\26\0\1\37\4\0\21\37\1\u01b4\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\u01b4\7\37"+
    "\26\0\1\37\4\0\13\37\1\u01b5\15\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\13\37\1\u01b5\14\37"+
    "\26\0\1\37\4\0\10\37\1\u01b6\20\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\10\37\1\u01b7\17\37"+
    "\26\0\1\37\4\0\21\37\1\u01b8\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\u01b8\7\37"+
    "\26\0\1\37\4\0\16\37\1\u0124\12\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\16\37\1\u0124\11\37"+
    "\26\0\1\37\4\0\4\37\1\u014a\24\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\4\37\1\u014a\23\37"+
    "\26\0\1\37\4\0\21\37\1\u01b9\7\37\4\0\30\37"+
    "\26\0\1\37\4\0\31\37\4\0\20\37\1\u01b9\7\37"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\25\1\3\11\21\1\1\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\2\0\3\11\1\0\5\11"+
    "\101\1\2\11\2\0\2\11\1\1\1\11\102\1\1\11"+
    "\323\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
//codigo de errores lexicos

    StringBuffer string = new StringBuffer();
    int indentados = 0;
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline+1, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1, yycolumn, yytext());
    }
    public Symbol indent(String analizar, boolean tieneTab, boolean esEOF) {
        if (!esEOF) {
            if (tieneTab) {
                int espacios = 0;
                for (int i = 0; i < analizar.length(); i++) {
                    if (analizar.charAt(i) == '\t') {
                        espacios++;
                    }
                }
                if ((indentados - espacios) > 0) {
                    indentados--;
                    yypushback(espacios);
                    //System.out.println("Se encuentra dedentado no1");
                    return new Symbol(sym.INDENT_C, yyline+1, yycolumn, yytext());
                } else if ((indentados - espacios)==0) {
                    yybegin(YYINITIAL);
                    return null;
                } else if ((indentados - espacios) < 0) {
                    indentados++;
                    yypushback(espacios);
                    //System.out.println("Se encuentra indentado");
                    return new Symbol(sym.INDENT_A, yyline+1, yycolumn, yytext());
                } else {
                    //System.out.println("No sé como entró acá");
                    return null;
                }
            } else {
                if (indentados > 0) {
                    indentados--;
                    yypushback(1);
                    //System.out.println("Se encuentra dedentado no2");
                    return new Symbol(sym.INDENT_C, yyline+1, yycolumn, yytext());
                } else {
                    yybegin(YYINITIAL);
                    yypushback(1);
                    return null;
                }
            }
        } else {
            if (indentados > 0) {
                indentados--;
                //System.out.println("Se encuentra dedentado no3");
                return new Symbol(sym.INDENT_C, yyline+1, yycolumn, yytext());
            } else {
                return new java_cup.runtime.Symbol(sym.EOF);
            }
        }
    }








  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+1+", en la columna: "+yycolumn);
            }
            // fall through
          case 79: break;
          case 2:
            { yybegin(SALTO_LINEA);
            }
            // fall through
          case 80: break;
          case 3:
            { 
            }
            // fall through
          case 81: break;
          case 4:
            { return new Symbol(sym.NOT,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 82: break;
          case 5:
            { return new Symbol(sym.MODULO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 83: break;
          case 6:
            { return new Symbol(sym.PARENTESIS_ABRE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 84: break;
          case 7:
            { return new Symbol(sym.PARENTESIS_CIERRA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 85: break;
          case 8:
            { return new Symbol(sym.MULTIPLICACION,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 86: break;
          case 9:
            { return new Symbol(sym.SUMA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 87: break;
          case 10:
            { return new Symbol(sym.COMA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 88: break;
          case 11:
            { return new Symbol(sym.RESTA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 89: break;
          case 12:
            { return new Symbol(sym.DIVISION,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 90: break;
          case 13:
            { return new Symbol(sym.ENTEROO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 91: break;
          case 14:
            { return new Symbol(sym.PTCOMA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 92: break;
          case 15:
            { return new Symbol(sym.MENORQUE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 93: break;
          case 16:
            { return new Symbol(sym.IGUAL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 94: break;
          case 17:
            { return new Symbol(sym.MAYORQUE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 95: break;
          case 18:
            { return new Symbol(sym.NOMBRE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 96: break;
          case 19:
            { return new Symbol(sym.CORCHETE_ABRE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 97: break;
          case 20:
            { return new Symbol(sym.CORCHETE_CIERRA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 98: break;
          case 21:
            { return new Symbol(sym.POTENCIA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 99: break;
          case 22:
            { return new Symbol(sym.LLAVE_ABRE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 100: break;
          case 23:
            { return new Symbol(sym.LLAVE_CIERRA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 101: break;
          case 24:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 102: break;
          case 25:
            { Symbol retorno = indent(yytext(),false,false); if (retorno!=null) {return retorno; };
            }
            // fall through
          case 103: break;
          case 26:
            { Symbol retorno = indent(yytext(),true,false); if (retorno!=null) {return retorno; };
            }
            // fall through
          case 104: break;
          case 27:
            { return new Symbol(sym.ESNULO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 105: break;
          case 28:
            { return new Symbol(sym.DIFERENCIACION,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 106: break;
          case 29:
            { return new Symbol(sym.CADENAA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 107: break;
          case 30:
            { return new Symbol(sym.AND,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 108: break;
          case 31:
            { return new Symbol(sym.XOR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 109: break;
          case 32:
            { return new Symbol(sym.INCREMENTO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 110: break;
          case 33:
            { return new Symbol(sym.SUMA_SIMPLIFICADA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 111: break;
          case 34:
            { return new Symbol(sym.DECREMENTO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 112: break;
          case 35:
            { yybegin(COMMENT_MULTILINEA);
            }
            // fall through
          case 113: break;
          case 36:
            { return new Symbol(sym.MENORIGUAL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 114: break;
          case 37:
            { return new Symbol(sym.IGUALACION,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 115: break;
          case 38:
            { return new Symbol(sym.MAYORIGUAL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 116: break;
          case 39:
            { yybegin(COMMENT_LINE);
            }
            // fall through
          case 117: break;
          case 40:
            { return new Symbol(sym.SI,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 118: break;
          case 41:
            { return symbol(sym.NOTAS_MUSICALES);
            }
            // fall through
          case 119: break;
          case 42:
            { return new Symbol(sym.OR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 120: break;
          case 43:
            { return new Symbol(sym.NAND,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 121: break;
          case 44:
            { return new Symbol(sym.NOR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 122: break;
          case 45:
            { return new Symbol(sym.CHARR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 123: break;
          case 46:
            { return new Symbol(sym.DECIMALL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 124: break;
          case 47:
            { return new Symbol(sym.VAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 125: break;
          case 48:
            { return new Symbol(sym.CASO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 126: break;
          case 49:
            { return new Symbol(sym.KEEP,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 127: break;
          case 50:
            { return new Symbol(sym.PARA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 128: break;
          case 51:
            { return new Symbol(sym.SINO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 129: break;
          case 52:
            { return new Symbol(sym.TRUE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 130: break;
          case 53:
            { return new Symbol(sym.DECIMAL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 131: break;
          case 54:
            { return new Symbol(sym.FALSE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 132: break;
          case 55:
            { return new Symbol(sym.HACER,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 133: break;
          case 56:
            { return new Symbol(sym.TIPOS_ORDENAMIENTO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 134: break;
          case 57:
            { return new Symbol(sym.PISTA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 135: break;
          case 58:
            { return new Symbol(sym.SALIR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 136: break;
          case 59:
            { return new Symbol(sym.CADENA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 137: break;
          case 60:
            { return new Symbol(sym.ENTERO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 138: break;
          case 61:
            { return new Symbol(sym.SWITCH,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 139: break;
          case 62:
            { return new Symbol(sym.ARREGLO,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 140: break;
          case 63:
            { return new Symbol(sym.BOOLEAN,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 141: break;
          case 64:
            { return new Symbol(sym.DEFAULT,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 142: break;
          case 65:
            { return new Symbol(sym.ESPERAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 143: break;
          case 66:
            { return new Symbol(sym.MENSAJE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 144: break;
          case 67:
            { return new Symbol(sym.ORDENAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 145: break;
          case 68:
            { return new Symbol(sym.RETORNA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 146: break;
          case 69:
            { return new Symbol(sym.CHAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 147: break;
          case 70:
            { return new Symbol(sym.EXTIENDE,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 148: break;
          case 71:
            { return new Symbol(sym.IMPRIMIR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 149: break;
          case 72:
            { return new Symbol(sym.LONGITUD,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 150: break;
          case 73:
            { return new Symbol(sym.MIENTRAS,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 151: break;
          case 74:
            { return new Symbol(sym.PROGRAMA,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 152: break;
          case 75:
            { return new Symbol(sym.CONTINUAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 153: break;
          case 76:
            { return new Symbol(sym.PRINCIPAL,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 154: break;
          case 77:
            { return new Symbol(sym.SUMARIZAR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 155: break;
          case 78:
            { return new Symbol(sym.REPRODUCIR,yyline+1,yycolumn, yytext());
            }
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
